--- original/sound/soc/msm/qdsp6v2/q6voice.h	2020-05-07 08:06:24.532161168 +0200
+++ changed/sound/soc/msm/qdsp6v2/q6voice.h	2019-06-03 13:39:55.000000000 +0200
@@ -42,12 +42,14 @@
 #define CVD_VERSION_0_0                      "0.0"
 #define CVD_VERSION_2_1                      "2.1"
 #define CVD_VERSION_2_2                      "2.2"
+#define CVD_VERSION_2_3                      "2.3"
 
 #define CVD_INT_VERSION_DEFAULT              0
 #define CVD_INT_VERSION_0_0                  1
 #define CVD_INT_VERSION_2_1                  2
 #define CVD_INT_VERSION_2_2                  3
-#define CVD_INT_VERSION_LAST                 CVD_INT_VERSION_2_2
+#define CVD_INT_VERSION_2_3                  4
+#define CVD_INT_VERSION_LAST                 CVD_INT_VERSION_2_3
 #define CVD_INT_VERSION_MAX                  (CVD_INT_VERSION_LAST + 1)
 
 struct cvd_version_table {
@@ -117,6 +119,21 @@ struct voice_rec_route_state {
 	u16 dl_flag;
 };
 
+#ifdef CONFIG_SEC_VOC_SOLUTION
+struct voice_dha_data {
+	short dha_mode;
+	short dha_select;
+	short dha_params[12];
+};
+
+enum {
+	LOOPBACK_DISABLE = 0,
+	LOOPBACK_ENABLE,
+	LOOPBACK_NODELAY,
+	LOOPBACK_MAX,
+};
+#endif /* CONFIG_SEC_VOC_SOLUTION */
+
 enum {
 	VOC_INIT = 0,
 	VOC_RUN,
@@ -146,6 +163,11 @@ struct mem_map_table {
 	struct ion_client	*client;
 };
 
+#ifdef CONFIG_SEC_VOC_SOLUTION
+/* Set a samsung DHA solution */
+#define VSS_ICOMMON_CMD_DHA_SET 0x0001128A
+#endif /*CONFIG_SEC_VOC_SOLUTION*/
+
 /* Common */
 #define VSS_ICOMMON_CMD_SET_UI_PROPERTY 0x00011103
 /* Set a UI property */
@@ -814,6 +836,31 @@ struct vss_icommon_cmd_set_ui_property_e
 	/* Reserved, set to 0. */
 };
 
+#ifdef CONFIG_SEC_VOC_SOLUTION
+#define VOICEPROC_MODULE_VENC        0x00010F07
+#define VOICE_PARAM_LOOPBACK_ENABLE  0x00010E18
+
+#define VOICE_MODULE_DHA             0x10001001
+#define VOICE_PARAM_DHA_DYNAMIC      0x10001022
+
+#define VOICE_VOICEMODE_MODULE       0x10001001
+#define VOICE_NBMODE_PARAM           0x10001023
+
+struct vss_icommon_cmd_set_loopback_enable_t {
+	uint32_t module_id;
+	/* Unique ID of the module. */
+	uint32_t param_id;
+	/* Unique ID of the parameter. */
+	uint16_t param_size;
+	/* Size of the parameter in bytes: MOD_ENABLE_PARAM_LEN */
+	uint16_t reserved;
+	/* Reserved; set to 0. */
+	uint16_t loopback_enable;
+	uint16_t reserved_field;
+	/* Reserved, set to 0. */
+};
+#endif /* CONFIG_SEC_VOC_SOLUTION*/
+
 /*
  * Event sent by the stream to the client that enables Rx DTMF
  * detection whenever DTMF is detected in the Rx path.
@@ -944,6 +991,16 @@ struct cvs_enc_buffer_consumed_cmd {
 	struct apr_hdr hdr;
 } __packed;
 
+#ifdef CONFIG_SEC_VOC_SOLUTION
+struct cvs_set_loopback_enable_cmd {
+	struct apr_hdr hdr;
+	uint32_t mem_handle;
+	uint64_t mem_address;
+	uint32_t mem_size;
+	struct vss_icommon_cmd_set_loopback_enable_t vss_set_loopback;
+} __packed;
+#endif /* CONFIG_SEC_VOC_SOLUTION */
+
 struct vss_istream_cmd_set_oob_packet_exchange_config_t {
 	struct apr_hdr hdr;
 	uint32_t mem_handle;
@@ -1423,6 +1480,35 @@ struct cvp_set_mute_cmd {
 	struct vss_ivolume_cmd_mute_v2_t cvp_set_mute;
 } __packed;
 
+#ifdef CONFIG_SEC_VOC_SOLUTION
+struct cvp_set_nbmode_enable_cmd {
+	struct apr_hdr hdr;
+	struct vss_icommon_cmd_set_ui_property_enable_t cvp_set_nbmode;
+} __packed;
+
+struct cvp_dha_parm_send_t {
+	uint32_t module_id;
+	/* Unique ID of the module. */
+	uint32_t param_id;
+	/* Unique ID of the parameter. */
+	uint16_t param_size;
+	/* Size of the parameter in bytes: MOD_ENABLE_PARAM_LEN */
+	uint16_t reserved;
+	/* Reserved; set to 0. */
+	uint16_t eq_mode;
+	uint16_t select;
+	int16_t param[12];
+} __packed;
+
+struct cvp_dha_parm_send_cmd {
+	struct apr_hdr hdr;
+	uint32_t mem_handle;
+	uint64_t mem_address;
+	uint32_t mem_size;
+	struct cvp_dha_parm_send_t dha_send;
+} __packed;
+#endif /* CONFIG_SEC_VOC_SOLUTION */
+
 /* CB for up-link packets. */
 typedef void (*ul_cb_fn)(uint8_t *voc_pkt,
 			 uint32_t pkt_len,
@@ -1594,6 +1680,13 @@ struct voice_data {
 	struct voice_rec_route_state rec_route_state;
 
 	struct power_supply *psy;
+
+#ifdef CONFIG_SEC_VOC_SOLUTION
+	struct voice_dha_data sec_dha_data;
+
+	u32 cvp_dha_state;
+	u32 cvp_nbmode_state;
+#endif /* CONFIG_SEC_VOC_SOLUTION */
 };
 
 struct cal_mem {
@@ -1785,4 +1878,14 @@ uint32_t voice_get_topology(uint32_t top
 int voc_set_sound_focus(struct sound_focus_param sound_focus_param);
 int voc_get_sound_focus(struct sound_focus_param *soundFocusData);
 int voc_get_source_tracking(struct source_tracking_param *sourceTrackingData);
+
+#ifdef CONFIG_SEC_VOC_SOLUTION
+int voice_sec_set_nbmode(short enable);
+int voice_sec_set_dha_data(short mode, short select, short *parameters);
+int voc_get_loopback_enable(void);
+void voc_set_loopback_enable(int loopback_enable);
+#elif defined(CONFIG_SEC_SND_ADAPTATION)
+struct common_data *voice_get_common_data(void);
+#endif
+
 #endif
