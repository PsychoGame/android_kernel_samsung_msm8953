--- original/drivers/char/diag/diagfwd_cntl.c	2020-05-07 11:40:16.440314306 +0200
+++ changed/drivers/char/diag/diagfwd_cntl.c	2019-06-03 13:39:49.000000000 +0200
@@ -117,7 +117,9 @@ void diag_notify_md_client(uint8_t perip
 	if (driver->logging_mode != DIAG_MEMORY_DEVICE_MODE)
 		return;
 
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on md_session_lock\n", __func__, __LINE__);
 	mutex_lock(&driver->md_session_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired md_session_lock\n", __func__, __LINE__);
 	memset(&info, 0, sizeof(struct siginfo));
 	info.si_code = SI_QUEUE;
 	info.si_int = (PERIPHERAL_MASK(peripheral) | data);
@@ -142,6 +144,7 @@ void diag_notify_md_client(uint8_t perip
 				peripheral, info.si_int, stat);
 	}
 	mutex_unlock(&driver->md_session_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 }
 
 static void process_pd_status(uint8_t *buf, uint32_t len,
@@ -348,13 +351,13 @@ static void process_incoming_feature_mas
 	feature_mask_len = header->feature_mask_len;
 
 	if (feature_mask_len == 0) {
-		pr_debug("diag: In %s, received invalid feature mask from peripheral %d\n",
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS,"diag: In %s, received invalid feature mask from peripheral %d\n",
 			 __func__, peripheral);
 		return;
 	}
 
 	if (feature_mask_len > FEATURE_MASK_LEN) {
-		pr_alert("diag: Receiving feature mask length more than Apps support\n");
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS,"diag: Receiving feature mask length more than Apps support\n");
 		feature_mask_len = FEATURE_MASK_LEN;
 	}
 
@@ -510,7 +513,9 @@ static void process_ssid_range_report(ui
 	/* Don't account for pkt_id and length */
 	read_len += header_len - (2 * sizeof(uint32_t));
 
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on msg_mask_lock\n", __func__, __LINE__);
 	mutex_lock(&driver->msg_mask_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired msg_mask_lock\n", __func__, __LINE__);
 	driver->max_ssid_count[peripheral] = header->count;
 	for (i = 0; i < header->count && read_len < len; i++) {
 		ssid_range = (struct diag_ssid_range_t *)ptr;
@@ -562,6 +567,7 @@ static void process_ssid_range_report(ui
 		driver->msg_mask_tbl_count += 1;
 	}
 	mutex_unlock(&driver->msg_mask_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released msg_mask_lock\n", __func__, __LINE__);
 }
 
 static void diag_build_time_mask_update(uint8_t *buf,
@@ -586,7 +592,9 @@ static void diag_build_time_mask_update(
 		       __func__, range->ssid_first, range->ssid_last);
 		return;
 	}
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on msg_mask_lock\n", __func__, __LINE__);
 	mutex_lock(&driver->msg_mask_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired msg_mask_lock\n", __func__, __LINE__);
 	build_mask = (struct diag_msg_mask_t *)(driver->build_time_mask->ptr);
 	num_items = range->ssid_last - range->ssid_first + 1;
 
@@ -637,7 +645,7 @@ static void diag_build_time_mask_update(
 	driver->bt_msg_mask_tbl_count += 1;
 end:
 	mutex_unlock(&driver->msg_mask_lock);
-
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released msg_mask_lock\n", __func__, __LINE__);
 	return;
 }
 
@@ -683,13 +691,14 @@ void diag_cntl_process_read_data(struct
 		return;
 
 	if (reg_dirty & PERIPHERAL_MASK(p_info->peripheral)) {
-		pr_err_ratelimited("diag: dropping command registration from peripheral %d\n",
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "diag: dropping command registration from peripheral %d\n",
 		       p_info->peripheral);
 		return;
 	}
 
 	while (read_len + header_len < len) {
 		ctrl_pkt = (struct diag_ctrl_pkt_header_t *)ptr;
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "ctrl_pkt->pkt_id = %d\n", ctrl_pkt->pkt_id);
 		switch (ctrl_pkt->pkt_id) {
 		case DIAG_CTRL_MSG_REG:
 			process_command_registration(ptr, ctrl_pkt->len,
@@ -724,7 +733,7 @@ void diag_cntl_process_read_data(struct
 						p_info->peripheral);
 			break;
 		default:
-			pr_debug("diag: Control packet %d not supported\n",
+			DIAG_LOG(DIAG_DEBUG_PERIPHERALS,"diag: Control packet %d not supported\n",
 				 ctrl_pkt->pkt_id);
 		}
 		ptr += header_len + ctrl_pkt->len;
