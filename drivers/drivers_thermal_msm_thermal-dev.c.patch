--- original/drivers/thermal/msm_thermal-dev.c	2020-05-07 08:06:18.535220095 +0200
+++ changed/drivers/thermal/msm_thermal-dev.c	2019-06-03 13:39:52.000000000 +0200
@@ -1,4 +1,4 @@
-/* Copyright (c) 2013-2017, The Linux Foundation. All rights reserved.
+/* Copyright (c) 2013-2016, The Linux Foundation. All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 and
@@ -35,7 +35,6 @@ static unsigned int freq_table_len[NR_CP
 static unsigned int voltage_table_set[NR_CPUS];
 static unsigned int *freq_table_ptr[NR_CPUS];
 static uint32_t *voltage_table_ptr[NR_CPUS];
-static DEFINE_MUTEX(ioctl_access_mutex);
 
 static int msm_thermal_ioctl_open(struct inode *node, struct file *filep)
 {
@@ -115,6 +114,7 @@ static long msm_thermal_process_freq_tab
 	uint32_t table_idx, idx = 0, cluster_id = query->clock_freq.cluster_num;
 	struct clock_plan_arg *clock_freq = &(query->clock_freq);
 
+	/* Security : CVE-2016-2411 ANDROID-26866053 */
 	if (cluster_id >= num_possible_cpus())
 		return -EINVAL;
 
@@ -204,6 +204,7 @@ static long msm_thermal_process_voltage_
 	uint32_t cluster_id = query->voltage.cluster_num;
 	struct voltage_plan_arg *voltage = &(query->voltage);
 
+	/* Security : CVE-2016-2411 ANDROID-26866053 */
 	if (cluster_id >= num_possible_cpus())
 		return -EINVAL;
 
@@ -292,9 +293,8 @@ static long msm_thermal_ioctl_process(st
 
 	ret = validate_and_copy(&cmd, &arg, &query);
 	if (ret)
-		return ret;
+		goto process_exit;
 
-	mutex_lock(&ioctl_access_mutex);
 	switch (cmd) {
 	case MSM_THERMAL_SET_CPU_MAX_FREQUENCY:
 		ret = msm_thermal_set_frequency(query.cpu_freq.cpu_num,
@@ -323,7 +323,6 @@ static long msm_thermal_ioctl_process(st
 		goto process_exit;
 	}
 process_exit:
-	mutex_unlock(&ioctl_access_mutex);
 	return ret;
 }
 
