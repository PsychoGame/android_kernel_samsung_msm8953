--- original/drivers/usb/storage/transport.c	2020-05-07 08:06:19.166213895 +0200
+++ changed/drivers/usb/storage/transport.c	2019-06-03 13:39:52.000000000 +0200
@@ -284,6 +284,9 @@ static int interpret_urb_result(struct u
 		 * a failed command */
 		if (usb_pipecontrol(pipe)) {
 			usb_stor_dbg(us, "-- stall on control pipe\n");
+#ifdef CONFIG_USB_DEBUG_DETAILED_LOG
+			printk(KERN_ERR "usb storage -- stall on control pipe\n");
+#endif
 			return USB_STOR_XFER_STALLED;
 		}
 
@@ -297,26 +300,41 @@ static int interpret_urb_result(struct u
 	/* babble - the device tried to send more than we wanted to read */
 	case -EOVERFLOW:
 		usb_stor_dbg(us, "-- babble\n");
+#ifdef CONFIG_USB_DEBUG_DETAILED_LOG
+		printk(KERN_ERR "usb storage -- babble\n");
+#endif
 		return USB_STOR_XFER_LONG;
 
 	/* the transfer was cancelled by abort, disconnect, or timeout */
 	case -ECONNRESET:
 		usb_stor_dbg(us, "-- transfer cancelled\n");
+#ifdef CONFIG_USB_DEBUG_DETAILED_LOG
+		printk(KERN_ERR "usb storage -- transfer cancelled\n");
+#endif
 		return USB_STOR_XFER_ERROR;
 
 	/* short scatter-gather read transfer */
 	case -EREMOTEIO:
 		usb_stor_dbg(us, "-- short read transfer\n");
+#ifdef CONFIG_USB_DEBUG_DETAILED_LOG
+		printk(KERN_ERR "usb storage -- short read transfer\n");
+#endif
 		return USB_STOR_XFER_SHORT;
 
 	/* abort or disconnect in progress */
 	case -EIO:
 		usb_stor_dbg(us, "-- abort or disconnect in progress\n");
+#ifdef CONFIG_USB_DEBUG_DETAILED_LOG
+		printk(KERN_ERR "usb storage -- abort or disconnect in progress\n");
+#endif
 		return USB_STOR_XFER_ERROR;
 
 	/* the catch-all error case */
 	default:
 		usb_stor_dbg(us, "-- unknown error\n");
+#ifdef CONFIG_USB_DEBUG_DETAILED_LOG
+		printk(KERN_ERR "usb storage -- unknown error %d\n", result);
+#endif
 		return USB_STOR_XFER_ERROR;
 	}
 }
@@ -608,6 +626,9 @@ void usb_stor_invoke_transport(struct sc
 	 */
 	if (test_bit(US_FLIDX_TIMED_OUT, &us->dflags)) {
 		usb_stor_dbg(us, "-- command was aborted\n");
+#ifdef CONFIG_USB_DEBUG_DETAILED_LOG
+		printk(KERN_ERR "usb storage -- command was aborted\n");
+#endif
 		srb->result = DID_ABORT << 16;
 		goto Handle_Errors;
 	}
@@ -615,6 +636,9 @@ void usb_stor_invoke_transport(struct sc
 	/* if there is a transport error, reset and don't auto-sense */
 	if (result == USB_STOR_TRANSPORT_ERROR) {
 		usb_stor_dbg(us, "-- transport indicates error, resetting\n");
+#ifdef CONFIG_USB_DEBUG_DETAILED_LOG
+		printk(KERN_ERR "usb storage -- transport indicates error, resetting\n");
+#endif
 		srb->result = DID_ERROR << 16;
 		goto Handle_Errors;
 	}
@@ -718,6 +742,9 @@ Retry_Sense:
 
 		if (test_bit(US_FLIDX_TIMED_OUT, &us->dflags)) {
 			usb_stor_dbg(us, "-- auto-sense aborted\n");
+#ifdef CONFIG_USB_DEBUG_DETAILED_LOG
+			printk(KERN_ERR "usb storage -- auto-sense aborted\n");
+#endif
 			srb->result = DID_ABORT << 16;
 
 			/* If SANE_SENSE caused this problem, disable it */
@@ -745,6 +772,9 @@ Retry_Sense:
 		/* Other failures */
 		if (temp_result != USB_STOR_TRANSPORT_GOOD) {
 			usb_stor_dbg(us, "-- auto-sense failure\n");
+#ifdef CONFIG_USB_DEBUG_DETAILED_LOG
+			printk(KERN_ERR "usb storage -- auto-sense failure\n");
+#endif
 
 			/* we skip the reset if this happens to be a
 			 * multi-target device, since failure of an
