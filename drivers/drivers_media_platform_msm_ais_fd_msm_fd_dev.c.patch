--- original/drivers/media/platform/msm/ais/fd/msm_fd_dev.c	2020-05-07 08:31:23.568807193 +0200
+++ changed/drivers/media/platform/msm/ais/fd/msm_fd_dev.c	2019-06-03 13:39:50.000000000 +0200
@@ -430,7 +430,6 @@ static int msm_fd_open(struct file *file
 	ctx->vb2_q.type = V4L2_BUF_TYPE_VIDEO_OUTPUT;
 	ctx->vb2_q.io_modes = VB2_USERPTR;
 	ctx->vb2_q.timestamp_flags = V4L2_BUF_FLAG_TIMESTAMP_COPY;
-	mutex_init(&ctx->lock);
 	ret = vb2_queue_init(&ctx->vb2_q);
 	if (ret < 0) {
 		dev_err(device->dev, "Error queue init\n");
@@ -481,9 +480,7 @@ static int msm_fd_release(struct file *f
 	msm_cpp_vbif_register_error_handler((void *)ctx,
 		VBIF_CLIENT_FD, NULL);
 
-	mutex_lock(&ctx->lock);
 	vb2_queue_release(&ctx->vb2_q);
-	mutex_unlock(&ctx->lock);
 
 	vfree(ctx->stats);
 
@@ -513,9 +510,7 @@ static unsigned int msm_fd_poll(struct f
 	struct fd_ctx *ctx = msm_fd_ctx_from_fh(file->private_data);
 	unsigned int ret;
 
-	mutex_lock(&ctx->lock);
 	ret = vb2_poll(&ctx->vb2_q, file, wait);
-	mutex_unlock(&ctx->lock);
 
 	if (atomic_read(&ctx->subscribed_for_event)) {
 		poll_wait(file, &ctx->fh.wait, wait);
@@ -753,9 +748,9 @@ static int msm_fd_reqbufs(struct file *f
 	int ret;
 	struct fd_ctx *ctx = msm_fd_ctx_from_fh(fh);
 
-	mutex_lock(&ctx->lock);
+	mutex_lock(&ctx->fd_device->recovery_lock);
 	ret = vb2_reqbufs(&ctx->vb2_q, req);
-	mutex_unlock(&ctx->lock);
+	mutex_unlock(&ctx->fd_device->recovery_lock);
 	return ret;
 }
 
@@ -771,9 +766,9 @@ static int msm_fd_qbuf(struct file *file
 	int ret;
 	struct fd_ctx *ctx = msm_fd_ctx_from_fh(fh);
 
-	mutex_lock(&ctx->lock);
+	mutex_lock(&ctx->fd_device->recovery_lock);
 	ret = vb2_qbuf(&ctx->vb2_q, pb);
-	mutex_unlock(&ctx->lock);
+	mutex_unlock(&ctx->fd_device->recovery_lock);
 	return ret;
 
 }
@@ -790,9 +785,9 @@ static int msm_fd_dqbuf(struct file *fil
 	int ret;
 	struct fd_ctx *ctx = msm_fd_ctx_from_fh(fh);
 
-	mutex_lock(&ctx->lock);
+	mutex_lock(&ctx->fd_device->recovery_lock);
 	ret = vb2_dqbuf(&ctx->vb2_q, pb, file->f_flags & O_NONBLOCK);
-	mutex_unlock(&ctx->lock);
+	mutex_unlock(&ctx->fd_device->recovery_lock);
 	return ret;
 }
 
@@ -808,9 +803,7 @@ static int msm_fd_streamon(struct file *
 	struct fd_ctx *ctx = msm_fd_ctx_from_fh(fh);
 	int ret;
 
-	mutex_lock(&ctx->lock);
 	ret = vb2_streamon(&ctx->vb2_q, buf_type);
-	mutex_unlock(&ctx->lock);
 	if (ret < 0)
 		dev_err(ctx->fd_device->dev, "Stream on fails\n");
 
@@ -829,9 +822,7 @@ static int msm_fd_streamoff(struct file
 	struct fd_ctx *ctx = msm_fd_ctx_from_fh(fh);
 	int ret;
 
-	mutex_lock(&ctx->lock);
 	ret = vb2_streamoff(&ctx->vb2_q, buf_type);
-	mutex_unlock(&ctx->lock);
 	if (ret < 0)
 		dev_err(ctx->fd_device->dev, "Stream off fails\n");
 
