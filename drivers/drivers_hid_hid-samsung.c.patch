--- original/drivers/hid/hid-samsung.c	2020-05-07 08:06:11.623288013 +0200
+++ changed/drivers/hid/hid-samsung.c	2019-06-03 13:39:50.000000000 +0200
@@ -130,6 +130,209 @@ static int samsung_kbd_mouse_input_mappi
 	return 1;
 }
 
+static int samsung_kbd_input_mapping(struct hid_device *hdev,
+	struct hid_input *hi, struct hid_field *field, struct hid_usage *usage,
+	unsigned long **bit, int *max)
+{
+	if (!(HID_UP_CONSUMER == (usage->hid & HID_USAGE_PAGE) ||
+			HID_UP_KEYBOARD == (usage->hid & HID_USAGE_PAGE)))
+		return 0;
+
+	dbg_hid("samsung wireless keyboard input mapping event [0x%x]\n",
+		usage->hid & HID_USAGE);
+
+	if (HID_UP_KEYBOARD == (usage->hid & HID_USAGE_PAGE)) {
+		switch (usage->hid & HID_USAGE) {
+		set_bit(EV_REP, hi->input->evbit);
+		/* Only for UK keyboard */
+		/* key found */
+#ifdef CONFIG_HID_KK_UPGRADE
+		case 0x32: samsung_kbd_mouse_map_key_clear(KEY_KBDILLUMTOGGLE); break;
+		case 0x64: samsung_kbd_mouse_map_key_clear(KEY_BACKSLASH); break;
+#else
+		case 0x32: samsung_kbd_mouse_map_key_clear(KEY_BACKSLASH); break;
+		case 0x64: samsung_kbd_mouse_map_key_clear(KEY_102ND); break;
+#endif
+		/* Only for BR keyboard */
+		case 0x87: samsung_kbd_mouse_map_key_clear(KEY_RO); break;
+		default:
+			return 0;
+		}
+	}
+
+	if (HID_UP_CONSUMER == (usage->hid & HID_USAGE_PAGE)) {
+		switch (usage->hid & HID_USAGE) {
+		/* report 2 */
+		/* MENU */
+		case 0x040: samsung_kbd_mouse_map_key_clear(KEY_MENU); break;
+		case 0x18a: samsung_kbd_mouse_map_key_clear(KEY_MAIL); break;
+		case 0x196: samsung_kbd_mouse_map_key_clear(KEY_WWW); break;
+		case 0x19e: samsung_kbd_mouse_map_key_clear(KEY_SCREENLOCK); break;
+		case 0x221: samsung_kbd_mouse_map_key_clear(KEY_SEARCH); break;
+		case 0x223: samsung_kbd_mouse_map_key_clear(KEY_HOMEPAGE); break;
+		/* RECENTAPPS */
+		case 0x301: samsung_kbd_mouse_map_key_clear(BTN_TRIGGER_HAPPY1); break;
+		/* APPLICATION */
+		case 0x302: samsung_kbd_mouse_map_key_clear(BTN_TRIGGER_HAPPY2); break;
+		/* Voice search */
+		case 0x305: samsung_kbd_mouse_map_key_clear(BTN_TRIGGER_HAPPY4); break;
+		/* QPANEL on/off */
+		case 0x306: samsung_kbd_mouse_map_key_clear(BTN_TRIGGER_HAPPY5); break;
+		/* SIP on/off */
+		case 0x307: samsung_kbd_mouse_map_key_clear(BTN_TRIGGER_HAPPY3); break;
+		/* LANG */
+		case 0x308: samsung_kbd_mouse_map_key_clear(KEY_LANGUAGE); break;
+		case 0x30a: samsung_kbd_mouse_map_key_clear(KEY_BRIGHTNESSDOWN); break;
+		case 0x30b: samsung_kbd_mouse_map_key_clear(KEY_BRIGHTNESSUP); break;
+		default:
+			return 0;
+		}
+	}
+
+	return 1;
+}
+
+static int samsung_gamepad_input_mapping(struct hid_device *hdev,
+	struct hid_input *hi, struct hid_field *field, struct hid_usage *usage,
+	unsigned long **bit, int *max)
+{
+	if (!(HID_UP_BUTTON == (usage->hid & HID_USAGE_PAGE) ||
+               HID_UP_CONSUMER == (usage->hid & HID_USAGE_PAGE)))
+		return 0;
+
+	dbg_hid("samsung wireless gamepad input mapping event [0x%x], %ld, %ld, [0x%x]\n",
+		usage->hid & HID_USAGE, hi->input->evbit[0], hi->input->absbit[0], usage->hid & HID_USAGE_PAGE);
+
+	if (HID_UP_BUTTON == (usage->hid & HID_USAGE_PAGE)) {
+		switch(usage->hid & HID_USAGE) {
+		case 0x01: samsung_kbd_mouse_map_key_clear(BTN_A); break;
+		case 0x02: samsung_kbd_mouse_map_key_clear(BTN_B); break;
+		case 0x03: samsung_kbd_mouse_map_key_clear(BTN_C); break;
+		case 0x04: samsung_kbd_mouse_map_key_clear(BTN_X); break;
+		case 0x05: samsung_kbd_mouse_map_key_clear(BTN_Y); break;
+		case 0x06: samsung_kbd_mouse_map_key_clear(BTN_Z); break;
+		case 0x07: samsung_kbd_mouse_map_key_clear(BTN_TL); break;
+		case 0x08: samsung_kbd_mouse_map_key_clear(BTN_TR); break;
+		case 0x09: samsung_kbd_mouse_map_key_clear(BTN_TL2); break;
+		case 0x0a: samsung_kbd_mouse_map_key_clear(BTN_TR2); break;
+		case 0x0b: samsung_kbd_mouse_map_key_clear(BTN_SELECT); break;
+		case 0x0c: samsung_kbd_mouse_map_key_clear(BTN_START); break;
+		case 0x0d: samsung_kbd_mouse_map_key_clear(BTN_MODE); break;
+		case 0x0e: samsung_kbd_mouse_map_key_clear(BTN_THUMBL); break;
+		case 0x0f: samsung_kbd_mouse_map_key_clear(BTN_THUMBR); break;
+		case 0x10: samsung_kbd_mouse_map_key_clear(BTN_GAME); break;
+		default:
+			return 0;
+		}
+	}
+
+	if (HID_UP_CONSUMER == (usage->hid & HID_USAGE_PAGE)) {
+		switch (usage->hid & HID_USAGE) {
+		case 0x040: samsung_kbd_mouse_map_key_clear(KEY_MENU); break;
+		case 0x223: samsung_kbd_mouse_map_key_clear(KEY_HOMEPAGE); break;
+		case 0x224: samsung_kbd_mouse_map_key_clear(KEY_BACK); break;
+
+		/* Screen Capture */
+		case 0x303: samsung_kbd_mouse_map_key_clear(KEY_SYSRQ); break;
+
+		default:
+			return 0;
+		}
+	}
+
+	return 1;
+}
+
+static int samsung_actionmouse_input_mapping(struct hid_device *hdev,
+	struct hid_input *hi, struct hid_field *field, struct hid_usage *usage,
+	unsigned long **bit, int *max)
+{
+
+	dbg_hid("samsung wireless actionmouse input mapping event [0x%x], [0x%x], %ld, %ld, [0x%x]\n",
+			usage->hid, usage->hid & HID_USAGE, hi->input->evbit[0], hi->input->absbit[0], usage->hid & HID_USAGE_PAGE);
+
+	if(((usage->hid & HID_USAGE_PAGE) != HID_UP_CONSUMER) && ((usage->hid & HID_USAGE_PAGE) != HID_UP_BUTTON))
+		return 0;
+
+	switch (usage->hid & HID_USAGE) {
+		case 0x301: samsung_kbd_mouse_map_key_clear(KEY_RECENT); break;
+		default:
+			return 0;
+	}
+
+	return 1;
+}
+
+static int samsung_universal_kbd_input_mapping(struct hid_device *hdev,
+	struct hid_input *hi, struct hid_field *field, struct hid_usage *usage,
+	unsigned long **bit, int *max)
+{
+	if (!(HID_UP_CONSUMER == (usage->hid & HID_USAGE_PAGE) ||
+			HID_UP_KEYBOARD == (usage->hid & HID_USAGE_PAGE)))
+		return 0;
+
+	dbg_hid("samsung wireless keyboard input mapping event [0x%x]\n",
+		usage->hid & HID_USAGE);
+
+	if (HID_UP_KEYBOARD == (usage->hid & HID_USAGE_PAGE)) {
+		switch (usage->hid & HID_USAGE) {
+		set_bit(EV_REP, hi->input->evbit);
+		/* Only for UK keyboard */
+		/* key found */
+#ifdef CONFIG_HID_KK_UPGRADE
+		case 0x32: samsung_kbd_mouse_map_key_clear(KEY_KBDILLUMTOGGLE); break;
+		case 0x64: samsung_kbd_mouse_map_key_clear(KEY_BACKSLASH); break;
+#else
+		case 0x32: samsung_kbd_mouse_map_key_clear(KEY_BACKSLASH); break;
+		case 0x64: samsung_kbd_mouse_map_key_clear(KEY_102ND); break;
+#endif
+		/* Only for BR keyboard */
+		case 0x87: samsung_kbd_mouse_map_key_clear(KEY_RO); break;
+		default:
+			return 0;
+		}
+	}
+
+	if (HID_UP_CONSUMER == (usage->hid & HID_USAGE_PAGE)) {
+		switch (usage->hid & HID_USAGE) {
+		/* report 2 */
+		/* MENU */
+		case 0x040: samsung_kbd_mouse_map_key_clear(KEY_MENU); break;
+		case 0x18a: samsung_kbd_mouse_map_key_clear(KEY_MAIL); break;
+		case 0x196: samsung_kbd_mouse_map_key_clear(KEY_WWW); break;
+		case 0x19e: samsung_kbd_mouse_map_key_clear(KEY_SCREENLOCK); break;
+		case 0x221: samsung_kbd_mouse_map_key_clear(KEY_SEARCH); break;
+		case 0x223: samsung_kbd_mouse_map_key_clear(KEY_HOMEPAGE); break;
+		/* RECENTAPPS */
+		case 0x301: samsung_kbd_mouse_map_key_clear(BTN_TRIGGER_HAPPY1); break;
+		/* APPLICATION */
+		case 0x302: samsung_kbd_mouse_map_key_clear(BTN_TRIGGER_HAPPY2); break;
+		/* Voice search */
+		case 0x305: samsung_kbd_mouse_map_key_clear(BTN_TRIGGER_HAPPY4); break;
+		/* QPANEL on/off */
+		case 0x306: samsung_kbd_mouse_map_key_clear(BTN_TRIGGER_HAPPY5); break;
+		/* SIP on/off */
+		case 0x307: samsung_kbd_mouse_map_key_clear(BTN_TRIGGER_HAPPY3); break;
+		/* LANG */
+		case 0x308: samsung_kbd_mouse_map_key_clear(KEY_LANGUAGE); break;
+		case 0x30a: samsung_kbd_mouse_map_key_clear(KEY_BRIGHTNESSDOWN); break;
+		case 0x070: samsung_kbd_mouse_map_key_clear(KEY_BRIGHTNESSDOWN); break;
+		case 0x30b: samsung_kbd_mouse_map_key_clear(KEY_BRIGHTNESSUP); break;
+		case 0x06f: samsung_kbd_mouse_map_key_clear(KEY_BRIGHTNESSUP); break;
+		/* S-Finder */
+		case 0x304: samsung_kbd_mouse_map_key_clear(BTN_TRIGGER_HAPPY7); break;
+		/* Screen Capture */
+		case 0x303: samsung_kbd_mouse_map_key_clear(KEY_SYSRQ); break;
+		/* Multi Window */
+		case 0x309: samsung_kbd_mouse_map_key_clear(BTN_TRIGGER_HAPPY9); break;
+		default:
+			return 0;
+		}
+	}
+
+	return 1;
+}
+
 static __u8 *samsung_report_fixup(struct hid_device *hdev, __u8 *rdesc,
 	unsigned int *rsize)
 {
@@ -147,6 +350,18 @@ static int samsung_input_mapping(struct
 	if (USB_DEVICE_ID_SAMSUNG_WIRELESS_KBD_MOUSE == hdev->product)
 		ret = samsung_kbd_mouse_input_mapping(hdev,
 			hi, field, usage, bit, max);
+	else if (USB_DEVICE_ID_SAMSUNG_WIRELESS_KBD == hdev->product)
+		ret = samsung_kbd_input_mapping(hdev,
+			hi, field, usage, bit, max);
+	else if(USB_DEVICE_ID_SAMSUNG_WIRELESS_GAMEPAD == hdev->product)
+		ret = samsung_gamepad_input_mapping(hdev,
+			hi, field, usage, bit, max);
+	else if(USB_DEVICE_ID_SAMSUNG_WIRELESS_ACTIONMOUSE == hdev->product)
+		ret = samsung_actionmouse_input_mapping(hdev,
+			hi, field, usage, bit, max);
+	else if(USB_DEVICE_ID_SAMSUNG_WIRELESS_UNIVERSAL_KBD == hdev->product)
+		ret = samsung_universal_kbd_input_mapping(hdev,
+			hi, field, usage, bit, max);
 
 	return ret;
 }
@@ -185,6 +400,10 @@ err_free:
 static const struct hid_device_id samsung_devices[] = {
 	{ HID_USB_DEVICE(USB_VENDOR_ID_SAMSUNG, USB_DEVICE_ID_SAMSUNG_IR_REMOTE) },
 	{ HID_USB_DEVICE(USB_VENDOR_ID_SAMSUNG, USB_DEVICE_ID_SAMSUNG_WIRELESS_KBD_MOUSE) },
+	{ HID_BLUETOOTH_DEVICE(USB_VENDOR_ID_SAMSUNG_ELECTRONICS, USB_DEVICE_ID_SAMSUNG_WIRELESS_KBD) },
+	{ HID_BLUETOOTH_DEVICE(USB_VENDOR_ID_SAMSUNG_ELECTRONICS, USB_DEVICE_ID_SAMSUNG_WIRELESS_GAMEPAD) },
+	{ HID_BLUETOOTH_DEVICE(USB_VENDOR_ID_SAMSUNG_ELECTRONICS, USB_DEVICE_ID_SAMSUNG_WIRELESS_ACTIONMOUSE) },
+	{ HID_BLUETOOTH_DEVICE(USB_VENDOR_ID_SAMSUNG_ELECTRONICS, USB_DEVICE_ID_SAMSUNG_WIRELESS_UNIVERSAL_KBD) },
 	{ }
 };
 MODULE_DEVICE_TABLE(hid, samsung_devices);
