--- original/drivers/mmc/host/sdhci.c	2020-05-07 08:31:23.937803874 +0200
+++ changed/drivers/mmc/host/sdhci.c	2019-06-03 13:39:50.000000000 +0200
@@ -101,6 +101,15 @@ static void sdhci_dump_state(struct sdhc
 		mmc_hostname(mmc), mmc->parent->power.runtime_status,
 		atomic_read(&mmc->parent->power.usage_count),
 		mmc->parent->power.disable_depth);
+        if (mmc->card) {
+		pr_info("%s: card->cid : %08x%08x%08x%08x\n", mmc_hostname(mmc), 
+				mmc->card->raw_cid[0], mmc->card->raw_cid[1], 
+				mmc->card->raw_cid[2], mmc->card->raw_cid[3]);
+	}
+	pr_info("%s: send %d at %lld, isr %d at %lld, finish_tasklet at %lld.\n", mmc_hostname(mmc),
+			host->send_cmd_idx, host->send_cmd_timestamp,
+			host->irq_cmd_idx, host->irq_timestamp,
+			host->finish_tasklet_timestamp);
 }
 
 static void sdhci_dumpregs(struct sdhci_host *host)
@@ -1267,6 +1276,8 @@ void sdhci_send_command(struct sdhci_hos
 	if (cmd->data)
 		host->data_start_time = ktime_get();
 	trace_mmc_cmd_rw_start(cmd->opcode, cmd->arg, cmd->flags);
+	host->send_cmd_timestamp = ktime_to_us(ktime_get());
+	host->send_cmd_idx = cmd->opcode;
 	MMC_TRACE(host->mmc,
 		"%s: updated 0x8=0x%08x 0xC=0x%08x 0xE=0x%08x\n", __func__,
 		sdhci_readl(host, SDHCI_ARGUMENT),
@@ -1999,6 +2010,10 @@ static void sdhci_do_set_ios(struct sdhc
 				mmc_card_sdio(host->mmc->card))
 			sdhci_cfg_irq(host, true, false);
 		spin_unlock_irqrestore(&host->lock, flags);
+#if defined(CONFIG_SEC_HYBRID_TRAY)
+		sdhci_set_power(host, ios->power_mode, ios->vdd);
+		host->ops->set_clock(host, ios->clock);
+#endif
 		return;
 	}
 	spin_unlock_irqrestore(&host->lock, flags);
@@ -2758,6 +2773,8 @@ static void sdhci_tasklet_finish(unsigne
 
 	host = (struct sdhci_host*)param;
 
+	host->finish_tasklet_timestamp = ktime_to_us(ktime_get());
+
 	spin_lock_irqsave(&host->lock, flags);
 
         /*
@@ -2890,6 +2907,9 @@ static void sdhci_cmd_irq(struct sdhci_h
 	trace_mmc_cmd_rw_end(host->cmd->opcode, intmask,
 				sdhci_readl(host, SDHCI_RESPONSE));
 
+	host->irq_timestamp = ktime_to_us(ktime_get());
+	host->irq_cmd_idx = host->cmd->opcode;
+
 	if (intmask & SDHCI_INT_TIMEOUT)
 		host->cmd->error = -ETIMEDOUT;
 	else if (intmask & (SDHCI_INT_CRC | SDHCI_INT_END_BIT |
@@ -2908,6 +2928,11 @@ static void sdhci_cmd_irq(struct sdhci_h
 			host->cmd->error = -ETIMEDOUT;
 		else if (auto_cmd_status & SDHCI_AUTO_CMD_CRC_ERR)
 			host->cmd->error = -EILSEQ;
+		if (host->mmc && host->mmc->card) {
+			pr_info("%s: card->cid : %08x%08x%08x%08x\n", mmc_hostname(host->mmc), 
+					host->mmc->card->raw_cid[0], host->mmc->card->raw_cid[1], 
+					host->mmc->card->raw_cid[2], host->mmc->card->raw_cid[3]);
+		}
 	}
 
 	if (host->cmd->error) {
@@ -2975,7 +3000,6 @@ static void sdhci_cmd_irq(struct sdhci_h
 		sdhci_finish_command(host);
 }
 
-#ifdef CONFIG_MMC_DEBUG
 static void sdhci_show_adma_error(struct sdhci_host *host)
 {
 	const char *name = mmc_hostname(host->mmc);
@@ -3007,9 +3031,6 @@ static void sdhci_show_adma_error(struct
 			break;
 	}
 }
-#else
-static void sdhci_show_adma_error(struct sdhci_host *host) { }
-#endif
 
 static void sdhci_data_irq(struct sdhci_host *host, u32 intmask)
 {
@@ -3020,6 +3041,9 @@ static void sdhci_data_irq(struct sdhci_
 	command = SDHCI_GET_CMD(sdhci_readw(host, SDHCI_COMMAND));
 	trace_mmc_data_rw_end(command, intmask);
 
+	host->irq_timestamp = ktime_to_us(ktime_get());
+	host->irq_cmd_idx = command;
+
 	/* CMD19 generates _only_ Buffer Read Ready interrupt */
 	if (intmask & SDHCI_INT_DATA_AVAIL) {
 		if (!(host->quirks2 & SDHCI_QUIRK2_NON_STANDARD_TUNING) &&
@@ -4099,12 +4123,13 @@ int sdhci_add_host(struct sdhci_host *ho
 	 * Enable polling on when card detection is broken and no card detect
 	 * gpio is present.
 	 */
+#ifndef CONFIG_NO_DETECT_PIN
 	if ((host->quirks & SDHCI_QUIRK_BROKEN_CARD_DETECTION) &&
 	    !(mmc->caps & MMC_CAP_NONREMOVABLE) &&
 	    (mmc_gpio_get_cd(host->mmc) < 0) &&
 	    !(mmc->caps2 & MMC_CAP2_NONHOTPLUG))
 		mmc->caps |= MMC_CAP_NEEDS_POLL;
-
+#endif
 	/* If there are external regulators, get them */
 	if (mmc_regulator_get_supply(mmc) == -EPROBE_DEFER)
 		return -EPROBE_DEFER;
