--- original/drivers/leds/leds-qpnp-flash.c	2020-05-07 08:31:23.414808579 +0200
+++ changed/drivers/leds/leds-qpnp-flash.c	2019-06-03 13:39:50.000000000 +0200
@@ -225,13 +225,11 @@ struct flash_led_platform_data {
 };
 
 struct qpnp_flash_led_buffer {
-	struct		mutex debugfs_lock; /* Prevent thread concurrency */
-	size_t		rpos;
-	size_t		wpos;
-	size_t		len;
-	struct		qpnp_flash_led *led;
-	u32		buffer_cnt;
-	char		data[0];
+	struct mutex debugfs_lock; /* Prevent thread concurrency */
+	size_t rpos;
+	size_t wpos;
+	size_t len;
+	char data[0];
 };
 
 /*
@@ -249,8 +247,10 @@ struct qpnp_flash_led {
 	struct workqueue_struct		*ordered_workq;
 	struct qpnp_vadc_chip		*vadc_dev;
 	struct mutex			flash_led_lock;
+	struct qpnp_flash_led_buffer	*log;
 	struct dentry			*dbgfs_root;
 	int				num_leds;
+	u32				buffer_cnt;
 	u16				base;
 	u16				current_addr;
 	u16				current2_addr;
@@ -282,10 +282,10 @@ static int flash_led_dbgfs_file_open(str
 	log->wpos = 0;
 	log->len = logbufsize - sizeof(*log);
 	mutex_init(&log->debugfs_lock);
-	log->led = led;
+	led->log = log;
 
-	log->buffer_cnt = 1;
-	file->private_data = log;
+	led->buffer_cnt = 1;
+	file->private_data = led;
 
 	return 0;
 }
@@ -299,12 +299,12 @@ static int flash_led_dfs_open(struct ino
 
 static int flash_led_dfs_close(struct inode *inode, struct file *file)
 {
-	struct qpnp_flash_led_buffer *log = file->private_data;
+	struct qpnp_flash_led *led = file->private_data;
 
-	if (log) {
+	if (led && led->log) {
 		file->private_data = NULL;
-		mutex_destroy(&log->debugfs_lock);
-		kfree(log);
+		mutex_destroy(&led->log->debugfs_lock);
+		kfree(led->log);
 	}
 
 	return 0;
@@ -333,21 +333,15 @@ static int print_to_log(struct qpnp_flas
 
 static ssize_t flash_led_dfs_latched_reg_read(struct file *fp, char __user *buf,
 					size_t count, loff_t *ppos) {
-	struct qpnp_flash_led_buffer *log = fp->private_data;
-	struct qpnp_flash_led *led;
+	struct qpnp_flash_led *led = fp->private_data;
+	struct qpnp_flash_led_buffer *log = led->log;
 	u8 val;
 	int rc = 0;
 	size_t len;
 	size_t ret;
 
-	if (!log) {
-		pr_err("error: file private data is NULL\n");
-		return -EFAULT;
-	}
-	led = log->led;
-
 	mutex_lock(&log->debugfs_lock);
-	if ((log->rpos >= log->wpos && log->buffer_cnt == 0) ||
+	if ((log->rpos >= log->wpos && led->buffer_cnt == 0) ||
 			((log->len - log->wpos) < MIN_BUFFER_WRITE_LEN))
 		goto unlock_mutex;
 
@@ -359,7 +353,7 @@ static ssize_t flash_led_dfs_latched_reg
 				INT_LATCHED_STS(led->base), rc);
 		goto unlock_mutex;
 	}
-	log->buffer_cnt--;
+	led->buffer_cnt--;
 
 	rc = print_to_log(log, "0x%05X ", INT_LATCHED_STS(led->base));
 	if (rc == 0)
@@ -394,24 +388,18 @@ unlock_mutex:
 
 static ssize_t flash_led_dfs_fault_reg_read(struct file *fp, char __user *buf,
 					size_t count, loff_t *ppos) {
-	struct qpnp_flash_led_buffer *log = fp->private_data;
-	struct qpnp_flash_led *led;
+	struct qpnp_flash_led *led = fp->private_data;
+	struct qpnp_flash_led_buffer *log = led->log;
 	int rc = 0;
 	size_t len;
 	size_t ret;
 
-	if (!log) {
-		pr_err("error: file private data is NULL\n");
-		return -EFAULT;
-	}
-	led = log->led;
-
 	mutex_lock(&log->debugfs_lock);
-	if ((log->rpos >= log->wpos && log->buffer_cnt == 0) ||
+	if ((log->rpos >= log->wpos && led->buffer_cnt == 0) ||
 			((log->len - log->wpos) < MIN_BUFFER_WRITE_LEN))
 		goto unlock_mutex;
 
-	log->buffer_cnt--;
+	led->buffer_cnt--;
 
 	rc = print_to_log(log, "0x%05X ", FLASH_LED_FAULT_STATUS(led->base));
 	if (rc == 0)
@@ -453,17 +441,10 @@ static ssize_t flash_led_dfs_fault_reg_e
 	int data;
 	size_t ret = 0;
 
-	struct qpnp_flash_led_buffer *log = file->private_data;
-	struct qpnp_flash_led *led;
+	struct qpnp_flash_led *led = file->private_data;
 	char *kbuf;
 
-	if (!log) {
-		pr_err("error: file private data is NULL\n");
-		return -EFAULT;
-	}
-	led = log->led;
-
-	mutex_lock(&log->debugfs_lock);
+	mutex_lock(&led->log->debugfs_lock);
 	kbuf = kmalloc(count + 1, GFP_KERNEL);
 	if (!kbuf) {
 		ret = -ENOMEM;
@@ -498,7 +479,7 @@ static ssize_t flash_led_dfs_fault_reg_e
 free_buf:
 	kfree(kbuf);
 unlock_mutex:
-	mutex_unlock(&log->debugfs_lock);
+	mutex_unlock(&led->log->debugfs_lock);
 	return ret;
 }
 
@@ -510,17 +491,10 @@ static ssize_t flash_led_dfs_dbg_enable(
 	int cnt = 0;
 	int data;
 	size_t ret = 0;
-	struct qpnp_flash_led_buffer *log = file->private_data;
-	struct qpnp_flash_led *led;
+	struct qpnp_flash_led *led = file->private_data;
 	char *kbuf;
 
-	if (!log) {
-		pr_err("error: file private data is NULL\n");
-		return -EFAULT;
-	}
-	led = log->led;
-
-	mutex_lock(&log->debugfs_lock);
+	mutex_lock(&led->log->debugfs_lock);
 	kbuf = kmalloc(count + 1, GFP_KERNEL);
 	if (!kbuf) {
 		ret = -ENOMEM;
@@ -554,7 +528,7 @@ static ssize_t flash_led_dfs_dbg_enable(
 free_buf:
 	kfree(kbuf);
 unlock_mutex:
-	mutex_unlock(&log->debugfs_lock);
+	mutex_unlock(&led->log->debugfs_lock);
 	return ret;
 }
 
