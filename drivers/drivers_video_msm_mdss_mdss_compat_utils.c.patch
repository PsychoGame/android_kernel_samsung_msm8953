--- original/drivers/video/msm/mdss/mdss_compat_utils.c	2020-05-07 08:51:35.114255249 +0200
+++ changed/drivers/video/msm/mdss/mdss_compat_utils.c	2019-06-03 13:39:53.000000000 +0200
@@ -873,13 +873,53 @@ static int __from_user_pcc_coeff_v17(
 	struct mdp_pcc_data_v1_7_32 pcc_cfg_payload32;
 	struct mdp_pcc_data_v1_7 pcc_cfg_payload;
 
+#if 0 //plan_b
+	if(sizeof(struct mdp_pcc_coeff_v1_7_32) == sizeof(struct mdp_pcc_coeff_v1_7))
+	{
+		u32 payload32;
+		u64 payload;
+
+		if (copy_from_user(&payload32, &pcc_cfg32->cfg_payload, sizeof(u32))){
+			pr_err("failed to read payload32 val for pcc from user1\n");
+			return -EFAULT;
+		}
+
+		if (copy_from_user(&payload, &pcc_cfg->cfg_payload, sizeof(u64))){
+			pr_err("failed to read payload val for pcc from user1\n");
+			return -EFAULT;
+		}
+
+		if(copy_in_user((void __user*)(&payload), (void __user*)(u64)payload32, sizeof(struct mdp_pcc_coeff_v1_7))){
+			pr_err("failed to copy payload for pcc from user\n");
+			return -EFAULT;
+		}
+	}
+ else
+#endif
+{
+#if defined(CONFIG_FB_MSM_MDSS_SAMSUNG)
+	u32 payload32;
+	u64 payload;
+
+	if (copy_from_user(&payload32, &pcc_cfg32->cfg_payload, sizeof(u32))){
+		pr_err("failed to copy payload for pcc from user1\n");
+		return -EFAULT;
+	}
+
+	if (copy_from_user(&pcc_cfg_payload32,
+						compat_ptr(payload32),
+			sizeof(struct mdp_pcc_data_v1_7_32))){
+		pr_err("failed to copy payload for pcc from user\n");
+		return -EFAULT;
+	}
+#else
 	if (copy_from_user(&pcc_cfg_payload32,
 			   compat_ptr(pcc_cfg32->cfg_payload),
 			   sizeof(struct mdp_pcc_data_v1_7_32))) {
 		pr_err("failed to copy payload for pcc from user\n");
 		return -EFAULT;
 	}
-
+#endif
 	memset(&pcc_cfg_payload, 0, sizeof(pcc_cfg_payload));
 	pcc_cfg_payload.r.b = pcc_cfg_payload32.r.b;
 	pcc_cfg_payload.r.g = pcc_cfg_payload32.r.g;
@@ -908,11 +948,25 @@ static int __from_user_pcc_coeff_v17(
 	pcc_cfg_payload.b.rg = pcc_cfg_payload32.b.rg;
 	pcc_cfg_payload.b.rgb = pcc_cfg_payload32.b.rgb;
 
+#if defined(CONFIG_FB_MSM_MDSS_SAMSUNG)
+	if (copy_from_user(&payload, &pcc_cfg->cfg_payload, sizeof(u64))){
+			pr_err("failed to copy payload for pcc from user1\n");
+			return -EFAULT;
+	}
+
+	if (copy_to_user((void __user *)payload, &pcc_cfg_payload,
+			 sizeof(struct mdp_pcc_data_v1_7))) {
+		pr_err("failed to copy payload for pcc to user\n");
+		return -EFAULT;
+	}
+#else
 	if (copy_to_user(pcc_cfg->cfg_payload, &pcc_cfg_payload,
 			 sizeof(pcc_cfg_payload))) {
 		pr_err("failed to copy payload for pcc to user\n");
 		return -EFAULT;
 	}
+#endif
+}
 	return 0;
 }
 
@@ -969,14 +1023,54 @@ static int __to_user_pcc_coeff_v1_7(
 	struct mdp_pcc_data_v1_7_32 pcc_cfg_payload32;
 	struct mdp_pcc_data_v1_7 pcc_cfg_payload;
 
+#if 0//plan_b
+if(sizeof(struct mdp_pcc_coeff_v1_7_32) == sizeof(struct mdp_pcc_coeff_v1_7))
+{
+	 u32 payload32;
+	 u64 payload;
+
+	 if (copy_from_user(&payload32, &pcc_cfg32->cfg_payload, sizeof(u32))){
+	  pr_err("failed to read payload32 val for pcc from user1\n");
+	  return -EFAULT;
+	 }
+
+	 if (copy_from_user(&payload, &pcc_cfg->cfg_payload, sizeof(u64))){
+	   pr_err("failed to read payload val for pcc from user1\n");
+	   return -EFAULT;
+	 }
+
+	 if(copy_in_user((void __user*)(u64)payload32, (void __user*)payload, sizeof(struct mdp_pcc_coeff_v1_7))){
+	  pr_err("failed to copy payload for pcc from user\n");
+	  return -EFAULT;
+	 }
+}
+else
+#endif
+{
+	u32 payload32;
+	u64 payload;
+
 	memset(&pcc_cfg_payload32, 0, sizeof(pcc_cfg_payload32));
+#if defined(CONFIG_FB_MSM_MDSS_SAMSUNG)
+	if (copy_from_user(&payload, &pcc_cfg->cfg_payload, sizeof(u64))){
+			pr_err("failed to copy payload for pcc from user1\n");
+			return -EFAULT;
+	}
+
+	if (copy_from_user(&pcc_cfg_payload,
+						 (void __user *)payload,
+			 sizeof(struct mdp_pcc_data_v1_7))) {
+		pr_err("failed to copy payload for pcc from user\n");
+		return -EFAULT;
+	}
+#else
 	if (copy_from_user(&pcc_cfg_payload,
 			   pcc_cfg->cfg_payload,
 			   sizeof(struct mdp_pcc_data_v1_7))) {
 		pr_err("failed to copy payload for pcc from user\n");
 		return -EFAULT;
 	}
-
+#endif
 	pcc_cfg_payload32.r.b = pcc_cfg_payload.r.b;
 	pcc_cfg_payload32.r.g = pcc_cfg_payload.r.g;
 	pcc_cfg_payload32.r.c = pcc_cfg_payload.r.c;
@@ -1004,13 +1098,26 @@ static int __to_user_pcc_coeff_v1_7(
 	pcc_cfg_payload32.b.rg = pcc_cfg_payload.b.rg;
 	pcc_cfg_payload32.b.rgb = pcc_cfg_payload.b.rgb;
 
+#if defined(CONFIG_FB_MSM_MDSS_SAMSUNG)
+	if (copy_from_user(&payload32, &pcc_cfg32->cfg_payload, sizeof(u32))){
+		pr_err("failed to copy payload for pcc from user1\n");
+		return -EFAULT;
+	}
+
+	if (copy_to_user(compat_ptr(payload32), &pcc_cfg_payload32,
+			 sizeof(struct mdp_pcc_data_v1_7_32))) {
+		pr_err("failed to copy payload for pcc to user\n");
+		return -EFAULT;
+	}
+#else
 	if (copy_to_user(compat_ptr(pcc_cfg32->cfg_payload),
 			 &pcc_cfg_payload32,
 			 sizeof(pcc_cfg_payload32))) {
 		pr_err("failed to copy payload for pcc to user\n");
 		return -EFAULT;
 	}
-
+#endif
+}
 	return 0;
 }
 
@@ -2553,6 +2660,11 @@ static int __from_user_ad_init(
 	    copy_in_user(&ad_init->alpha_base,
 			&ad_init32->alpha_base,
 			sizeof(uint32_t)) ||
+#if defined(CONFIG_FB_MSM_MDSS_SAMSUNG)
+	    copy_in_user(&ad_init->al_thresh,
+			&ad_init32->al_thresh,
+			sizeof(uint32_t)) ||			
+#endif
 	    copy_in_user(&ad_init->bl_lin_len,
 			&ad_init32->bl_lin_len,
 			sizeof(uint32_t)) ||
