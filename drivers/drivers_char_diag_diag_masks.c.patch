--- original/drivers/char/diag/diag_masks.c	2020-05-07 11:40:16.406314631 +0200
+++ changed/drivers/char/diag/diag_masks.c	2019-06-03 13:39:49.000000000 +0200
@@ -102,7 +102,7 @@ static void diag_send_log_mask_update(ui
 
 	if (!driver->diagfwd_cntl[peripheral] ||
 	    !driver->diagfwd_cntl[peripheral]->ch_open) {
-		pr_debug("diag: In %s, control channel is not open, p: %d\n",
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS,"diag: In %s, control channel is not open, p: %d\n",
 			 __func__, peripheral);
 		return;
 	}
@@ -113,10 +113,13 @@ static void diag_send_log_mask_update(ui
 	else
 		mask_info = &log_mask;
 
-	if (!mask_info)
+
+	if (!mask_info || !mask_info->ptr || !mask_info->update_buf)
 		return;
 
 	mask = (struct diag_log_mask_t *)mask_info->ptr;
+	if (!mask->ptr)
+		return;
 	buf = mask_info->update_buf;
 
 	switch (mask_info->status) {
@@ -140,7 +143,9 @@ static void diag_send_log_mask_update(ui
 		return;
 	}
 
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on mask_info->lock\n", __func__, __LINE__);
 	mutex_lock(&mask_info->lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired mask_info->lock\n", __func__, __LINE__);
 	for (i = 0; i < MAX_EQUIP_ID; i++, mask++) {
 		if (!mask->ptr)
 			continue;
@@ -148,7 +153,10 @@ static void diag_send_log_mask_update(ui
 		if (equip_id != i && equip_id != ALL_EQUIP_ID)
 			continue;
 
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on mask->lock\n", __func__, __LINE__);
 		mutex_lock(&mask->lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired mask->lock\n", __func__, __LINE__);
+		
 		ctrl_pkt.cmd_type = DIAG_CTRL_MSG_LOG_MASK;
 		ctrl_pkt.stream_id = 1;
 		ctrl_pkt.status = mask_info->status;
@@ -164,9 +172,10 @@ static void diag_send_log_mask_update(ui
 			temp = krealloc(buf, header_len + mask_size,
 					GFP_KERNEL);
 			if (!temp) {
-				pr_err_ratelimited("diag: Unable to realloc log update buffer, new size: %d, equip_id: %d\n",
+				DIAG_LOG(DIAG_DEBUG_PERIPHERALS,"diag: Unable to realloc log update buffer, new size: %d, equip_id: %d\n",
 				       header_len + mask_size, equip_id);
 				mutex_unlock(&mask->lock);
+				DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released mask->lock\n", __func__, __LINE__);
 				break;
 			}
 			mask_info->update_buf = temp;
@@ -178,6 +187,7 @@ static void diag_send_log_mask_update(ui
 		if (mask_size > 0 && mask_size <= LOG_MASK_SIZE)
 			memcpy(buf + header_len, mask->ptr, mask_size);
 		mutex_unlock(&mask->lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released mask->lock\n", __func__, __LINE__);
 
 		DIAG_LOG(DIAG_DEBUG_MASKS,
 			 "sending ctrl pkt to %d, e %d num_items %d size %d\n",
@@ -187,13 +197,14 @@ static void diag_send_log_mask_update(ui
 		err = diagfwd_write(peripheral, TYPE_CNTL,
 				    buf, header_len + mask_size);
 		if (err && err != -ENODEV)
-			pr_err_ratelimited("diag: Unable to send log masks to peripheral %d, equip_id: %d, err: %d\n",
+			DIAG_LOG(DIAG_DEBUG_PERIPHERALS,"diag: Unable to send log masks to peripheral %d, equip_id: %d, err: %d\n",
 			       peripheral, i, err);
 		if (send_once || equip_id != ALL_EQUIP_ID)
 			break;
 
 	}
 	mutex_unlock(&mask_info->lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released mask_info->lock\n", __func__, __LINE__);
 }
 
 static void diag_send_event_mask_update(uint8_t peripheral)
@@ -208,7 +219,7 @@ static void diag_send_event_mask_update(
 	int temp_len = 0;
 
 	if (num_bytes <= 0 || num_bytes > driver->event_mask_size) {
-		pr_debug("diag: In %s, invalid event mask length %d\n",
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS,"diag: In %s, invalid event mask length %d\n",
 			 __func__, num_bytes);
 		return;
 	}
@@ -218,7 +229,7 @@ static void diag_send_event_mask_update(
 
 	if (!driver->diagfwd_cntl[peripheral] ||
 	    !driver->diagfwd_cntl[peripheral]->ch_open) {
-		pr_debug("diag: In %s, control channel is not open, p: %d\n",
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS,"diag: In %s, control channel is not open, p: %d\n",
 			 __func__, peripheral);
 		return;
 	}
@@ -229,11 +240,14 @@ static void diag_send_event_mask_update(
 	else
 		mask_info = &event_mask;
 
-	if (!mask_info)
+
+	if (!mask_info || !mask_info->ptr || !mask_info->update_buf)
 		return;
 
 	buf = mask_info->update_buf;
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on mask_info->lock\n", __func__, __LINE__);
 	mutex_lock(&mask_info->lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired mask_info->lock\n", __func__, __LINE__);
 	header.cmd_type = DIAG_CTRL_MSG_EVENT_MASK;
 	header.stream_id = 1;
 	header.status = mask_info->status;
@@ -254,7 +268,7 @@ static void diag_send_event_mask_update(
 			temp_len = num_bytes + sizeof(header);
 			temp = krealloc(buf, temp_len, GFP_KERNEL);
 			if (!temp) {
-				pr_err("diag: Unable to realloc event mask update buffer\n");
+				DIAG_LOG(DIAG_DEBUG_PERIPHERALS,"diag: Unable to realloc event mask update buffer\n");
 				goto err;
 			} else {
 				mask_info->update_buf = temp;
@@ -272,7 +286,7 @@ static void diag_send_event_mask_update(
 		write_len += num_bytes;
 		break;
 	default:
-		pr_debug("diag: In %s, invalid status %d\n", __func__,
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS,"diag: In %s, invalid status %d\n", __func__,
 			 mask_info->status);
 		goto err;
 	}
@@ -282,10 +296,11 @@ static void diag_send_event_mask_update(
 
 	err = diagfwd_write(peripheral, TYPE_CNTL, buf, write_len);
 	if (err && err != -ENODEV)
-		pr_err_ratelimited("diag: Unable to send event masks to peripheral %d\n",
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS,"diag: Unable to send event masks to peripheral %d\n",
 		       peripheral);
 err:
 	mutex_unlock(&mask_info->lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released mask_info->lock\n", __func__, __LINE__);
 }
 
 static void diag_send_msg_mask_update(uint8_t peripheral, int first, int last)
@@ -320,13 +335,16 @@ static void diag_send_msg_mask_update(ui
 	} else
 		mask_info = &msg_mask;
 
-	if (!mask_info)
-		return;
 
+	if (!mask_info || !mask_info->ptr || !mask_info->update_buf)
+		return;
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on msg_mask_lock\n", __func__, __LINE__);
 	mutex_lock(&driver->msg_mask_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired msg_mask_lock\n", __func__, __LINE__);
 	mask = (struct diag_msg_mask_t *)mask_info->ptr;
 	if (!mask->ptr) {
 		mutex_unlock(&driver->msg_mask_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released msg_mask_lock\n", __func__, __LINE__);
 		return;
 	}
 	buf = mask_info->update_buf;
@@ -335,7 +353,10 @@ static void diag_send_msg_mask_update(ui
 	else
 		msg_mask_tbl_count_local = driver->msg_mask_tbl_count;
 	mutex_unlock(&driver->msg_mask_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released msg_mask_lock\n", __func__, __LINE__);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on mask_info->lock\n", __func__, __LINE__);
 	mutex_lock(&mask_info->lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired mask_info->lock\n", __func__, __LINE__);
 	switch (mask_info->status) {
 	case DIAG_CTRL_MASK_ALL_DISABLED:
 		mask_size = 0;
@@ -346,7 +367,7 @@ static void diag_send_msg_mask_update(ui
 	case DIAG_CTRL_MASK_VALID:
 		break;
 	default:
-		pr_debug("diag: In %s, invalid status: %d\n", __func__,
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS,"diag: In %s, invalid status: %d\n", __func__,
 			 mask_info->status);
 		goto err;
 	}
@@ -354,14 +375,19 @@ static void diag_send_msg_mask_update(ui
 	for (i = 0; i < msg_mask_tbl_count_local; i++, mask++) {
 		if (!mask->ptr)
 			continue;
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on msg_mask_lock\n", __func__, __LINE__);
 		mutex_lock(&driver->msg_mask_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired msg_mask_lock\n", __func__, __LINE__);
 		if (((mask->ssid_first > first) ||
 			(mask->ssid_last_tools < last)) && first != ALL_SSID) {
 			mutex_unlock(&driver->msg_mask_lock);
+			DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released msg_mask_lock\n", __func__, __LINE__);
 			continue;
 		}
 
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on mask->lock\n", __func__, __LINE__);
 		mutex_lock(&mask->lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired mask->lock\n", __func__, __LINE__);
 		if (mask_info->status == DIAG_CTRL_MASK_VALID) {
 			mask_size =
 				mask->ssid_last_tools - mask->ssid_first + 1;
@@ -371,7 +397,7 @@ static void diag_send_msg_mask_update(ui
 			temp = krealloc(mask_info->update_buf, temp_len,
 					GFP_KERNEL);
 			if (!temp) {
-				pr_err("diag: In %s, unable to realloc msg_mask update buffer\n",
+				DIAG_LOG(DIAG_DEBUG_PERIPHERALS,"diag: In %s, unable to realloc msg_mask update buffer\n",
 				       __func__);
 				mask_size = (mask_info->update_buf_len -
 					    header_len) / sizeof(uint32_t);
@@ -379,7 +405,7 @@ static void diag_send_msg_mask_update(ui
 				mask_info->update_buf = temp;
 				mask_info->update_buf_len = temp_len;
 				buf = temp;
-				pr_debug("diag: In %s, successfully reallocated msg_mask update buffer to len: %d\n",
+				DIAG_LOG(DIAG_DEBUG_PERIPHERALS,"diag: In %s, successfully reallocated msg_mask update buffer to len: %d\n",
 					 __func__, mask_info->update_buf_len);
 			}
 		} else if (mask_info->status == DIAG_CTRL_MASK_ALL_ENABLED) {
@@ -399,7 +425,9 @@ proceed:
 		if (mask_size > 0)
 			memcpy(buf + header_len, mask->ptr, mask_size);
 		mutex_unlock(&mask->lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released mask->lock\n", __func__, __LINE__);
 		mutex_unlock(&driver->msg_mask_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released msg_mask_lock\n", __func__, __LINE__);
 
 		err = diagfwd_write(peripheral, TYPE_CNTL, buf,
 				    header_len + mask_size);
@@ -412,6 +440,7 @@ proceed:
 	}
 err:
 	mutex_unlock(&mask_info->lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released mask_info->lock\n", __func__, __LINE__);
 }
 
 static void diag_send_time_sync_update(uint8_t peripheral)
@@ -513,7 +542,9 @@ static int diag_cmd_get_ssid_range(unsig
 	struct diag_mask_info *mask_info = NULL;
 	struct diag_md_session_t *info = NULL;
 
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on md_session_lock\n", __func__, __LINE__);
 	mutex_lock(&driver->md_session_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired md_session_lock\n", __func__, __LINE__);
 	info = diag_md_session_get_pid(pid);
 	mask_info = (!info) ? &msg_mask : info->msg_mask;
 	if (!src_buf || !dest_buf || src_len <= 0 || dest_len <= 0 ||
@@ -522,20 +553,31 @@ static int diag_cmd_get_ssid_range(unsig
 		       __func__, src_buf, src_len, dest_buf, dest_len,
 		       mask_info);
 		mutex_unlock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
+		return -EINVAL;
+	}
+	if (!mask_info->ptr) {
+		pr_err("diag: In %s, invalid input mask_info->ptr: %pK\n",
+			__func__, mask_info->ptr);
+		mutex_unlock(&driver->md_session_lock);
 		return -EINVAL;
 	}
 	if (!mask_info->ptr) {
 		pr_err("diag: In %s, invalid input mask_info->ptr: %pK\n",
 			__func__, mask_info->ptr);
 		mutex_unlock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 		return -EINVAL;
 	}
 
 	if (!diag_apps_responds()) {
 		mutex_unlock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 		return 0;
 	}
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on msg_mask_lock\n", __func__, __LINE__);
 	mutex_lock(&driver->msg_mask_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired msg_mask_lock\n", __func__, __LINE__);
 	msg_mask_tbl_count = (info) ? info->msg_mask_tbl_count :
 		driver->msg_mask_tbl_count;
 	rsp.cmd_code = DIAG_CMD_MSG_CONFIG;
@@ -558,7 +600,9 @@ static int diag_cmd_get_ssid_range(unsig
 		write_len += sizeof(ssid_range);
 	}
 	mutex_unlock(&driver->msg_mask_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released msg_mask_lock\n", __func__, __LINE__);
 	mutex_unlock(&driver->md_session_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 	return write_len;
 }
 
@@ -581,8 +625,9 @@ static int diag_cmd_get_build_mask(unsig
 
 	if (!diag_apps_responds())
 		return 0;
-
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on msg_mask_lock\n", __func__, __LINE__);
 	mutex_lock(&driver->msg_mask_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired msg_mask_lock\n", __func__, __LINE__);
 	req = (struct diag_build_mask_req_t *)src_buf;
 	rsp.cmd_code = DIAG_CMD_MSG_CONFIG;
 	rsp.sub_cmd = DIAG_CMD_OP_GET_BUILD_MASK;
@@ -615,7 +660,7 @@ static int diag_cmd_get_build_mask(unsig
 	memcpy(dest_buf, &rsp, sizeof(rsp));
 	write_len += sizeof(rsp);
 	mutex_unlock(&driver->msg_mask_lock);
-
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released msg_mask_lock\n", __func__, __LINE__);
 	return write_len;
 }
 
@@ -632,7 +677,9 @@ static int diag_cmd_get_msg_mask(unsigne
 	struct diag_mask_info *mask_info = NULL;
 	struct diag_md_session_t *info = NULL;
 
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on md_session_lock\n", __func__, __LINE__);
 	mutex_lock(&driver->md_session_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired md_session_lock\n", __func__, __LINE__);
 	info = diag_md_session_get_pid(pid);
 
 	mask_info = (!info) ? &msg_mask : info->msg_mask;
@@ -642,6 +689,7 @@ static int diag_cmd_get_msg_mask(unsigne
 		       __func__, src_buf, src_len, dest_buf, dest_len,
 		       mask_info);
 		mutex_unlock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 		return -EINVAL;
 	}
 	if (!mask_info->ptr) {
@@ -650,12 +698,22 @@ static int diag_cmd_get_msg_mask(unsigne
 		mutex_unlock(&driver->md_session_lock);
 		return -EINVAL;
 	}
+	if (!mask_info->ptr) {
+		pr_err("diag: In %s, invalid input mask_info->ptr: %pK\n",
+			__func__, mask_info->ptr);
+		mutex_unlock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
+		return -EINVAL;
+	}
 	if (!diag_apps_responds()) {
 		mutex_unlock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 		return 0;
 	}
 
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on msg_mask_lock\n", __func__, __LINE__);
 	mutex_lock(&driver->msg_mask_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired msg_mask_lock\n", __func__, __LINE__);
 	msg_mask_tbl_count = (info) ? info->msg_mask_tbl_count :
 			driver->msg_mask_tbl_count;
 	req = (struct diag_build_mask_req_t *)src_buf;
@@ -670,7 +728,9 @@ static int diag_cmd_get_msg_mask(unsigne
 		pr_err("diag: Invalid input in %s, mask->ptr: %pK\n",
 			__func__, mask->ptr);
 		mutex_unlock(&driver->msg_mask_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released msg_mask_lock\n", __func__, __LINE__);
 		mutex_unlock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 		return -EINVAL;
 	}
 	for (i = 0; i < msg_mask_tbl_count; i++, mask++) {
@@ -692,7 +752,9 @@ static int diag_cmd_get_msg_mask(unsigne
 	memcpy(dest_buf, &rsp, sizeof(rsp));
 	write_len += sizeof(rsp);
 	mutex_unlock(&driver->msg_mask_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released msg_mask_lock\n", __func__, __LINE__);
 	mutex_unlock(&driver->md_session_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 	return write_len;
 }
 
@@ -714,7 +776,9 @@ static int diag_cmd_set_msg_mask(unsigne
 	struct diag_md_session_t *info = NULL;
 	uint8_t msg_mask_tbl_count = 0;
 
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on md_session_lock\n", __func__, __LINE__);
 	mutex_lock(&driver->md_session_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired md_session_lock\n", __func__, __LINE__);
 	info = diag_md_session_get_pid(pid);
 
 	mask_info = (!info) ? &msg_mask : info->msg_mask;
@@ -724,25 +788,40 @@ static int diag_cmd_set_msg_mask(unsigne
 		       __func__, src_buf, src_len, dest_buf, dest_len,
 		       mask_info);
 		mutex_unlock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
+		return -EINVAL;
+	}
+	if (!mask_info->ptr) {
+		pr_err("diag: In %s, invalid input mask_info->ptr: %pK\n",
+			__func__, mask_info->ptr);
+		mutex_unlock(&driver->md_session_lock);
 		return -EINVAL;
 	}
 	if (!mask_info->ptr) {
 		pr_err("diag: In %s, invalid input mask_info->ptr: %pK\n",
 			__func__, mask_info->ptr);
 		mutex_unlock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 		return -EINVAL;
 	}
 
 	req = (struct diag_msg_build_mask_t *)src_buf;
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on mask_info->lock\n", __func__, __LINE__);
 	mutex_lock(&mask_info->lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired mask_info->lock\n", __func__, __LINE__);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on msg_mask_lock\n", __func__, __LINE__);
 	mutex_lock(&driver->msg_mask_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired msg_mask_lock\n", __func__, __LINE__);
 	mask = (struct diag_msg_mask_t *)mask_info->ptr;
 	if (!mask->ptr) {
 		pr_err("diag: Invalid input in %s, mask->ptr: %pK\n",
 			__func__, mask->ptr);
 		mutex_unlock(&driver->msg_mask_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released msg_mask_lock\n", __func__, __LINE__);
 		mutex_unlock(&mask_info->lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released mask_info->lock\n", __func__, __LINE__);
 		mutex_unlock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 		return -EINVAL;
 	}
 	msg_mask_tbl_count = (info) ? info->msg_mask_tbl_count :
@@ -763,7 +842,9 @@ static int diag_cmd_set_msg_mask(unsigne
 		}
 		mask_next = NULL;
 		found = 1;
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on mask->lock\n", __func__, __LINE__);
 		mutex_lock(&mask->lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired mask->lock\n", __func__, __LINE__);
 		mask_size = req->ssid_last - req->ssid_first + 1;
 		if (mask_size > MAX_SSID_PER_RANGE) {
 			pr_warn("diag: In %s, truncating ssid range, %d-%d to max allowed: %d\n",
@@ -787,9 +868,13 @@ static int diag_cmd_set_msg_mask(unsigne
 				pr_err_ratelimited("diag: In %s, unable to allocate memory for msg mask ptr, mask_size: %d\n",
 						   __func__, mask_size);
 				mutex_unlock(&mask->lock);
+				DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released mask->lock\n", __func__, __LINE__);
 				mutex_unlock(&driver->msg_mask_lock);
+				DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released msg_mask_lock\n", __func__, __LINE__);
 				mutex_unlock(&mask_info->lock);
+				DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released mask_info->lock\n", __func__, __LINE__);
 				mutex_unlock(&driver->md_session_lock);
+				DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 				return -ENOMEM;
 			}
 			mask->ptr = temp;
@@ -800,17 +885,22 @@ static int diag_cmd_set_msg_mask(unsigne
 			pr_err("diag: In %s, Not in msg mask range, mask_size: %d, offset: %d\n",
 			       __func__, mask_size, offset);
 			mutex_unlock(&mask->lock);
+			DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released mask->lock\n", __func__, __LINE__);
 			break;
 		}
 		mask_size = mask_size * sizeof(uint32_t);
 		memcpy(mask->ptr + offset, src_buf + header_len, mask_size);
 		mutex_unlock(&mask->lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released mask->lock\n", __func__, __LINE__);
 		mask_info->status = DIAG_CTRL_MASK_VALID;
 		break;
 	}
 	mutex_unlock(&driver->msg_mask_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released msg_mask_lock\n", __func__, __LINE__);
 	mutex_unlock(&mask_info->lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released mask_info->lock\n", __func__, __LINE__);
 	mutex_unlock(&driver->md_session_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 	if (diag_check_update(APPS_DATA))
 		diag_update_userspace_clients(MSG_MASKS_TYPE);
 
@@ -835,7 +925,12 @@ static int diag_cmd_set_msg_mask(unsigne
 	for (i = 0; i < NUM_PERIPHERALS; i++) {
 		if (!diag_check_update(i))
 			continue;
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on md_session_lock\n", __func__, __LINE__);
+		mutex_lock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired md_session_lock\n", __func__, __LINE__);
 		diag_send_msg_mask_update(i, req->ssid_first, req->ssid_last);
+		mutex_unlock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 	}
 end:
 	return write_len;
@@ -854,7 +949,9 @@ static int diag_cmd_set_all_msg_mask(uns
 	struct diag_md_session_t *info = NULL;
 	uint8_t msg_mask_tbl_count = 0;
 
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on md_session_lock\n", __func__, __LINE__);
 	mutex_lock(&driver->md_session_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired md_session_lock\n", __func__, __LINE__);
 	info = diag_md_session_get_pid(pid);
 
 	mask_info = (!info) ? &msg_mask : info->msg_mask;
@@ -864,27 +961,36 @@ static int diag_cmd_set_all_msg_mask(uns
 		       __func__, src_buf, src_len, dest_buf, dest_len,
 		       mask_info);
 		mutex_unlock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 		return -EINVAL;
 	}
 	if (!mask_info->ptr) {
 		pr_err("diag: In %s, invalid input mask_info->ptr: %pK\n",
 			__func__, mask_info->ptr);
 		mutex_unlock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 		return -EINVAL;
 	}
 
 	req = (struct diag_msg_config_rsp_t *)src_buf;
 
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on mask_info->lock\n", __func__, __LINE__);
 	mutex_lock(&mask_info->lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired mask_info->lock\n", __func__, __LINE__);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on msg_mask_lock\n", __func__, __LINE__);
 	mutex_lock(&driver->msg_mask_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired msg_mask_lock\n", __func__, __LINE__);
 
 	mask = (struct diag_msg_mask_t *)mask_info->ptr;
 	if (!mask->ptr) {
 		pr_err("diag: Invalid input in %s, mask->ptr: %pK\n",
 			__func__, mask->ptr);
 		mutex_unlock(&driver->msg_mask_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released msg_mask_lock\n", __func__, __LINE__);
 		mutex_unlock(&mask_info->lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released mask_info->lock\n", __func__, __LINE__);
 		mutex_unlock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 		return -EINVAL;
 	}
 	msg_mask_tbl_count = (info) ? info->msg_mask_tbl_count :
@@ -893,15 +999,21 @@ static int diag_cmd_set_all_msg_mask(uns
 					   DIAG_CTRL_MASK_ALL_DISABLED;
 	for (i = 0; i < msg_mask_tbl_count; i++, mask++) {
 		if (mask && mask->ptr) {
+			DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on mask->lock\n", __func__, __LINE__);
 			mutex_lock(&mask->lock);
+			DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired mask->lock\n", __func__, __LINE__);
 			memset(mask->ptr, req->rt_mask,
-			       mask->range * sizeof(uint32_t));
+		    	   mask->range * sizeof(uint32_t));
 			mutex_unlock(&mask->lock);
+			DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released mask->lock\n", __func__, __LINE__);
 		}
 	}
 	mutex_unlock(&driver->msg_mask_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released msg_mask_lock\n", __func__, __LINE__);
 	mutex_unlock(&mask_info->lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released mask_info->lock\n", __func__, __LINE__);
 	mutex_unlock(&driver->md_session_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 	if (diag_check_update(APPS_DATA))
 		diag_update_userspace_clients(MSG_MASKS_TYPE);
 
@@ -920,7 +1032,12 @@ static int diag_cmd_set_all_msg_mask(uns
 	for (i = 0; i < NUM_PERIPHERALS; i++) {
 		if (!diag_check_update(i))
 			continue;
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on md_session_lock\n", __func__, __LINE__);
+		mutex_lock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired md_session_lock\n", __func__, __LINE__);
 		diag_send_msg_mask_update(i, ALL_SSID, ALL_SSID);
+		mutex_unlock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 	}
 
 	return write_len;
@@ -973,7 +1090,9 @@ static int diag_cmd_update_event_mask(un
 	struct diag_mask_info *mask_info = NULL;
 	struct diag_md_session_t *info = NULL;
 
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on md_session_lock\n", __func__, __LINE__);
 	mutex_lock(&driver->md_session_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired md_session_lock\n", __func__, __LINE__);
 	info = diag_md_session_get_pid(pid);
 	mask_info = (!info) ? &event_mask : info->event_mask;
 	if (!src_buf || !dest_buf || src_len <= 0 || dest_len <= 0 ||
@@ -982,12 +1101,14 @@ static int diag_cmd_update_event_mask(un
 		       __func__, src_buf, src_len, dest_buf, dest_len,
 		       mask_info);
 		mutex_unlock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 		return -EINVAL;
 	}
 	if (!mask_info->ptr) {
 		pr_err("diag: In %s, invalid input mask_info->ptr: %pK\n",
 			__func__, mask_info->ptr);
 		mutex_unlock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 		return -EINVAL;
 	}
 	req = (struct diag_event_mask_config_t *)src_buf;
@@ -996,14 +1117,19 @@ static int diag_cmd_update_event_mask(un
 		pr_err("diag: In %s, invalid event mask len: %d\n", __func__,
 		       mask_len);
 		mutex_unlock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 		return -EIO;
 	}
 
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on mask_info->lock\n", __func__, __LINE__);
 	mutex_lock(&mask_info->lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired mask_info->lock\n", __func__, __LINE__);
 	memcpy(mask_info->ptr, src_buf + header_len, mask_len);
 	mask_info->status = DIAG_CTRL_MASK_VALID;
 	mutex_unlock(&mask_info->lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released mask_info->lock\n", __func__, __LINE__);
 	mutex_unlock(&driver->md_session_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 	if (diag_check_update(APPS_DATA))
 		diag_update_userspace_clients(EVENT_MASKS_TYPE);
 
@@ -1023,7 +1149,12 @@ static int diag_cmd_update_event_mask(un
 	for (i = 0; i < NUM_PERIPHERALS; i++) {
 		if (!diag_check_update(i))
 			continue;
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on md_session_lock\n", __func__, __LINE__);
+		mutex_lock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired md_session_lock\n", __func__, __LINE__);
 		diag_send_event_mask_update(i);
+		mutex_unlock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 	}
 
 	return write_len;
@@ -1039,7 +1170,9 @@ static int diag_cmd_toggle_events(unsign
 	struct diag_mask_info *mask_info = NULL;
 	struct diag_md_session_t *info = NULL;
 
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on md_session_lock\n", __func__, __LINE__);
 	mutex_lock(&driver->md_session_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired md_session_lock\n", __func__, __LINE__);
 	info = diag_md_session_get_pid(pid);
 	mask_info = (!info) ? &event_mask : info->event_mask;
 	if (!src_buf || !dest_buf || src_len <= 0 || dest_len <= 0 ||
@@ -1048,17 +1181,21 @@ static int diag_cmd_toggle_events(unsign
 		       __func__, src_buf, src_len, dest_buf, dest_len,
 		       mask_info);
 		mutex_unlock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 		return -EINVAL;
 	}
 	if (!mask_info->ptr) {
 		pr_err("diag: In %s, invalid input mask_info->ptr: %pK\n",
 			__func__, mask_info->ptr);
 		mutex_unlock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 		return -EINVAL;
 	}
 
 	toggle = *(src_buf + 1);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on mask_info->lock\n", __func__, __LINE__);
 	mutex_lock(&mask_info->lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired mask_info->lock\n", __func__, __LINE__);
 	if (toggle) {
 		mask_info->status = DIAG_CTRL_MASK_ALL_ENABLED;
 		memset(mask_info->ptr, 0xFF, mask_info->mask_len);
@@ -1067,7 +1204,9 @@ static int diag_cmd_toggle_events(unsign
 		memset(mask_info->ptr, 0, mask_info->mask_len);
 	}
 	mutex_unlock(&mask_info->lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released mask_info->lock\n", __func__, __LINE__);
 	mutex_unlock(&driver->md_session_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 	if (diag_check_update(APPS_DATA))
 		diag_update_userspace_clients(EVENT_MASKS_TYPE);
 
@@ -1080,7 +1219,12 @@ static int diag_cmd_toggle_events(unsign
 	for (i = 0; i < NUM_PERIPHERALS; i++) {
 		if (!diag_check_update(i))
 			continue;
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on md_session_lock\n", __func__, __LINE__);
+		mutex_lock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired md_session_lock\n", __func__, __LINE__);
 		diag_send_event_mask_update(i);
+		mutex_unlock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 	}
 	memcpy(dest_buf, &header, sizeof(header));
 	write_len += sizeof(header);
@@ -1104,7 +1248,9 @@ static int diag_cmd_get_log_mask(unsigne
 	struct diag_mask_info *mask_info = NULL;
 	struct diag_md_session_t *info = NULL;
 
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on md_session_lock\n", __func__, __LINE__);
 	mutex_lock(&driver->md_session_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired md_session_lock\n", __func__, __LINE__);
 	info = diag_md_session_get_pid(pid);
 
 	mask_info = (!info) ? &log_mask : info->log_mask;
@@ -1114,6 +1260,7 @@ static int diag_cmd_get_log_mask(unsigne
 		       __func__, src_buf, src_len, dest_buf, dest_len,
 		       mask_info);
 		mutex_unlock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 		return -EINVAL;
 	}
 	if (!mask_info->ptr) {
@@ -1122,9 +1269,17 @@ static int diag_cmd_get_log_mask(unsigne
 		mutex_unlock(&driver->md_session_lock);
 		return -EINVAL;
 	}
+	if (!mask_info->ptr) {
+		pr_err("diag: In %s, invalid input mask_info->ptr: %pK\n",
+			__func__, mask_info->ptr);
+		mutex_unlock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
+		return -EINVAL;
+	}
 
 	if (!diag_apps_responds()) {
 		mutex_unlock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 		return 0;
 	}
 
@@ -1147,6 +1302,7 @@ static int diag_cmd_get_log_mask(unsigne
 		pr_err("diag: Invalid input in %s, mask: %pK\n",
 			__func__, log_item);
 		mutex_unlock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 		return -EINVAL;
 	}
 	for (i = 0; i < MAX_EQUIP_ID; i++, log_item++) {
@@ -1189,6 +1345,7 @@ static int diag_cmd_get_log_mask(unsigne
 	memcpy(dest_buf, &rsp, rsp_header_len);
 
 	mutex_unlock(&driver->md_session_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 	return write_len;
 }
 
@@ -1248,7 +1405,9 @@ static int diag_cmd_set_log_mask(unsigne
 	struct diag_mask_info *mask_info = NULL;
 	struct diag_md_session_t *info = NULL;
 
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on md_session_lock\n", __func__, __LINE__);
 	mutex_lock(&driver->md_session_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired md_session_lock\n", __func__, __LINE__);
 	info = diag_md_session_get_pid(pid);
 
 	mask_info = (!info) ? &log_mask : info->log_mask;
@@ -1258,12 +1417,14 @@ static int diag_cmd_set_log_mask(unsigne
 		       __func__, src_buf, src_len, dest_buf, dest_len,
 		       mask_info);
 		mutex_unlock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 		return -EINVAL;
 	}
 	if (!mask_info->ptr) {
 		pr_err("diag: In %s, invalid input mask_info->ptr: %pK\n",
 			__func__, mask_info->ptr);
 		mutex_unlock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 		return -EINVAL;
 	}
 
@@ -1274,6 +1435,7 @@ static int diag_cmd_set_log_mask(unsigne
 		pr_err("diag: Invalid input in %s, mask->ptr: %pK\n",
 			__func__, mask->ptr);
 		mutex_unlock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 		return -EINVAL;
 	}
 	if (req->equip_id >= MAX_EQUIP_ID) {
@@ -1288,13 +1450,17 @@ static int diag_cmd_set_log_mask(unsigne
 		status = LOG_STATUS_INVALID;
 	}
 
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on mask_info->lock\n", __func__, __LINE__);
 	mutex_lock(&mask_info->lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired mask_info->lock\n", __func__, __LINE__);
 	for (i = 0; i < MAX_EQUIP_ID && !status; i++, mask++) {
 		if (!mask || !mask->ptr)
 			continue;
 		if (mask->equip_id != req->equip_id)
 			continue;
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on mask->lock\n", __func__, __LINE__);
 		mutex_lock(&mask->lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired mask->lock\n", __func__, __LINE__);
 
 		DIAG_LOG(DIAG_DEBUG_MASKS, "e: %d current: %d %d new: %d %d",
 			 mask->equip_id, mask->num_items_tools,
@@ -1320,6 +1486,7 @@ static int diag_cmd_set_log_mask(unsigne
 			if (!temp_buf) {
 				mask_info->status = DIAG_CTRL_MASK_INVALID;
 				mutex_unlock(&mask->lock);
+				DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released mask->lock\n", __func__, __LINE__);
 				break;
 			}
 			mask->ptr = temp_buf;
@@ -1334,11 +1501,14 @@ static int diag_cmd_set_log_mask(unsigne
 			 req->equip_id, mask->num_items_tools,
 			 mask->range_tools, mask_size);
 		mutex_unlock(&mask->lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released mask->lock\n", __func__, __LINE__);
 		mask_info->status = DIAG_CTRL_MASK_VALID;
 		break;
 	}
 	mutex_unlock(&mask_info->lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released mask_info->lock\n", __func__, __LINE__);
 	mutex_unlock(&driver->md_session_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 	if (diag_check_update(APPS_DATA))
 		diag_update_userspace_clients(LOG_MASKS_TYPE);
 
@@ -1370,7 +1540,12 @@ static int diag_cmd_set_log_mask(unsigne
 	for (i = 0; i < NUM_PERIPHERALS; i++) {
 		if (!diag_check_update(i))
 			continue;
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on md_session_lock\n", __func__, __LINE__);
+		mutex_lock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired md_session_lock\n", __func__, __LINE__);
 		diag_send_log_mask_update(i, req->equip_id);
+		mutex_unlock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 	}
 end:
 	return write_len;
@@ -1382,11 +1557,12 @@ static int diag_cmd_disable_log_mask(uns
 	struct diag_mask_info *mask_info = NULL;
 	struct diag_log_mask_t *mask = NULL;
 	struct diag_log_config_rsp_t header;
-	int write_len = 0;
-	int i;
+	int write_len = 0, i;
 	struct diag_md_session_t *info = NULL;
 
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on md_session_lock\n", __func__, __LINE__);
 	mutex_lock(&driver->md_session_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired md_session_lock\n", __func__, __LINE__);
 	info = diag_md_session_get_pid(pid);
 
 	mask_info = (!info) ? &log_mask : info->log_mask;
@@ -1396,12 +1572,14 @@ static int diag_cmd_disable_log_mask(uns
 		       __func__, src_buf, src_len, dest_buf, dest_len,
 		       mask_info);
 		mutex_unlock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 		return -EINVAL;
 	}
 	if (!mask_info->ptr) {
 		pr_err("diag: In %s, invalid input mask_info->ptr: %pK\n",
 			__func__, mask_info->ptr);
 		mutex_unlock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 		return -EINVAL;
 	}
 	mask = (struct diag_log_mask_t *)mask_info->ptr;
@@ -1409,17 +1587,22 @@ static int diag_cmd_disable_log_mask(uns
 		pr_err("diag: Invalid input in %s, mask->ptr: %pK\n",
 			__func__, mask->ptr);
 		mutex_unlock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 		return -EINVAL;
 	}
 	for (i = 0; i < MAX_EQUIP_ID; i++, mask++) {
 		if (mask && mask->ptr) {
+			DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on mask->lock\n", __func__, __LINE__);
 			mutex_lock(&mask->lock);
+			DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired mask->lock\n", __func__, __LINE__);
 			memset(mask->ptr, 0, mask->range);
 			mutex_unlock(&mask->lock);
+			DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released mask->lock\n", __func__, __LINE__);
 		}
 	}
 	mask_info->status = DIAG_CTRL_MASK_ALL_DISABLED;
 	mutex_unlock(&driver->md_session_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 	if (diag_check_update(APPS_DATA))
 		diag_update_userspace_clients(LOG_MASKS_TYPE);
 
@@ -1438,7 +1621,12 @@ static int diag_cmd_disable_log_mask(uns
 	for (i = 0; i < NUM_PERIPHERALS; i++) {
 		if (!diag_check_update(i))
 			continue;
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on md_session_lock\n", __func__, __LINE__);
+		mutex_lock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired md_session_lock\n", __func__, __LINE__);
 		diag_send_log_mask_update(i, ALL_EQUIP_ID);
+		mutex_unlock(&driver->md_session_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 	}
 
 	return write_len;
@@ -1477,7 +1665,9 @@ static int diag_create_msg_mask_table(vo
 	struct diag_ssid_range_t range;
 
 	mutex_lock(&msg_mask.lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on msg_mask_lock\n", __func__, __LINE__);
 	mutex_lock(&driver->msg_mask_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired msg_mask_lock\n", __func__, __LINE__);
 	driver->msg_mask_tbl_count = MSG_MASK_TBL_CNT;
 	for (i = 0; (i < driver->msg_mask_tbl_count) && mask;
 			i++, mask++) {
@@ -1488,6 +1678,7 @@ static int diag_create_msg_mask_table(vo
 			break;
 	}
 	mutex_unlock(&driver->msg_mask_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released msg_mask_lock\n", __func__, __LINE__);
 	mutex_unlock(&msg_mask.lock);
 	return err;
 }
@@ -1501,8 +1692,12 @@ static int diag_create_build_time_mask(v
 	struct diag_msg_mask_t *build_mask = NULL;
 	struct diag_ssid_range_t range;
 
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on msg_bt_mask.lock\n", __func__, __LINE__);
 	mutex_lock(&msg_bt_mask.lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired on msg_bt_mask.lock\n", __func__, __LINE__);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on msg_mask_lock\n", __func__, __LINE__);
 	mutex_lock(&driver->msg_mask_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired msg_mask_lock\n", __func__, __LINE__);
 	driver->bt_msg_mask_tbl_count = MSG_MASK_TBL_CNT;
 	build_mask = (struct diag_msg_mask_t *)msg_bt_mask.ptr;
 	for (i = 0; (i < driver->bt_msg_mask_tbl_count) && build_mask;
@@ -1617,7 +1812,9 @@ static int diag_create_build_time_mask(v
 		memcpy(build_mask->ptr, tbl, tbl_size);
 	}
 	mutex_unlock(&driver->msg_mask_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released msg_mask_lock\n", __func__, __LINE__);
 	mutex_unlock(&msg_bt_mask.lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released on msg_bt_mask.lock\n", __func__, __LINE__);
 	return err;
 }
 
@@ -1681,12 +1878,15 @@ static void __diag_mask_exit(struct diag
 	if (!mask_info || !mask_info->ptr)
 		return;
 
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on mask_info->lock\n", __func__, __LINE__);
 	mutex_lock(&mask_info->lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired mask_info->lock\n", __func__, __LINE__);
 	kfree(mask_info->ptr);
 	mask_info->ptr = NULL;
 	kfree(mask_info->update_buf);
 	mask_info->update_buf = NULL;
 	mutex_unlock(&mask_info->lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released mask_info->lock\n", __func__, __LINE__);
 }
 
 int diag_log_mask_copy(struct diag_mask_info *dest, struct diag_mask_info *src)
@@ -1739,12 +1939,15 @@ void diag_log_mask_free(struct diag_mask
 	if (!mask_info || !mask_info->ptr)
 		return;
 
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on mask_info->lock\n", __func__, __LINE__);
 	mutex_lock(&mask_info->lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired mask_info->lock\n", __func__, __LINE__);
 	mask = (struct diag_log_mask_t *)mask_info->ptr;
 	if (!mask->ptr) {
 		pr_err("diag: Invalid input in %s, mask->ptr: %pK\n",
 			__func__, mask->ptr);
 		mutex_unlock(&mask_info->lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released mask_info->lock\n", __func__, __LINE__);
 		return;
 	}
 	for (i = 0; i < MAX_EQUIP_ID; i++, mask++) {
@@ -1752,6 +1955,7 @@ void diag_log_mask_free(struct diag_mask
 		mask->ptr = NULL;
 	}
 	mutex_unlock(&mask_info->lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released mask_info->lock\n", __func__, __LINE__);
 
 	__diag_mask_exit(mask_info);
 
@@ -1772,11 +1976,14 @@ static int diag_msg_mask_init(void)
 		pr_err("diag: Unable to create msg masks, err: %d\n", err);
 		return err;
 	}
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on msg_mask_lock\n", __func__, __LINE__);
 	mutex_lock(&driver->msg_mask_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired msg_mask_lock\n", __func__, __LINE__);
 	driver->msg_mask = &msg_mask;
 	for (i = 0; i < NUM_PERIPHERALS; i++)
 		driver->max_ssid_count[i] = 0;
 	mutex_unlock(&driver->msg_mask_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released msg_mask_lock\n", __func__, __LINE__);
 
 	return 0;
 }
@@ -1795,7 +2002,9 @@ int diag_msg_mask_copy(struct diag_md_se
 
 	mutex_init(&dest->lock);
 	mutex_lock(&dest->lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on msg_mask_lock\n", __func__, __LINE__);
 	mutex_lock(&driver->msg_mask_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired msg_mask_lock\n", __func__, __LINE__);
 	new_session->msg_mask_tbl_count =
 		driver->msg_mask_tbl_count;
 	err = __diag_mask_init(dest,
@@ -1823,6 +2032,7 @@ int diag_msg_mask_copy(struct diag_md_se
 		dest_mask++;
 	}
 	mutex_unlock(&driver->msg_mask_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released msg_mask_lock\n", __func__, __LINE__);
 	mutex_unlock(&dest->lock);
 	return err;
 }
@@ -1836,14 +2046,20 @@ void diag_msg_mask_free(struct diag_mask
 
 	if (!mask_info || !mask_info->ptr)
 		return;
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on mask_info->lock\n", __func__, __LINE__);
 	mutex_lock(&mask_info->lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired mask_info->lock\n", __func__, __LINE__);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on msg_mask_lock\n", __func__, __LINE__);
 	mutex_lock(&driver->msg_mask_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired msg_mask_lock\n", __func__, __LINE__);
 	mask = (struct diag_msg_mask_t *)mask_info->ptr;
 	if (!mask->ptr) {
 		pr_err("diag: Invalid input in %s, mask->ptr: %pK\n",
 			__func__, mask->ptr);
 		mutex_unlock(&driver->msg_mask_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released msg_mask_lock\n", __func__, __LINE__);
 		mutex_unlock(&mask_info->lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released mask_info->lock\n", __func__, __LINE__);
 		return;
 	}
 	msg_mask_tbl_count = (session_info) ?
@@ -1854,7 +2070,9 @@ void diag_msg_mask_free(struct diag_mask
 		mask->ptr = NULL;
 	}
 	mutex_unlock(&driver->msg_mask_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released msg_mask_lock\n", __func__, __LINE__);
 	mutex_unlock(&mask_info->lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released mask_info->lock\n", __func__, __LINE__);
 	__diag_mask_exit(mask_info);
 }
 
@@ -1862,7 +2080,9 @@ static void diag_msg_mask_exit(void)
 {
 	int i;
 	struct diag_msg_mask_t *mask = NULL;
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on msg_mask_lock\n", __func__, __LINE__);
 	mutex_lock(&driver->msg_mask_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired msg_mask_lock\n", __func__, __LINE__);
 	mask = (struct diag_msg_mask_t *)(msg_mask.ptr);
 	if (mask) {
 		for (i = 0; i < driver->msg_mask_tbl_count; i++, mask++)
@@ -1873,6 +2093,7 @@ static void diag_msg_mask_exit(void)
 	kfree(msg_mask.update_buf);
 	msg_mask.update_buf = NULL;
 	mutex_unlock(&driver->msg_mask_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released msg_mask_lock\n", __func__, __LINE__);
 }
 
 static int diag_build_time_mask_init(void)
@@ -1898,7 +2119,9 @@ static void diag_build_time_mask_exit(vo
 {
 	int i;
 	struct diag_msg_mask_t *mask = NULL;
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on msg_mask_lock\n", __func__, __LINE__);
 	mutex_lock(&driver->msg_mask_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired msg_mask_lock\n", __func__, __LINE__);
 	mask = (struct diag_msg_mask_t *)(msg_bt_mask.ptr);
 	if (mask) {
 		for (i = 0; i < driver->bt_msg_mask_tbl_count; i++, mask++)
@@ -1907,6 +2130,7 @@ static void diag_build_time_mask_exit(vo
 		msg_bt_mask.ptr = NULL;
 	}
 	mutex_unlock(&driver->msg_mask_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released msg_mask_lock\n", __func__, __LINE__);
 }
 
 static int diag_log_mask_init(void)
@@ -2025,15 +2249,22 @@ int diag_copy_to_user_msg_mask(char __us
 			__func__, mask_info->ptr, mask_info->update_buf);
 		return -EINVAL;
 	}
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on mask_info->lock\n", __func__, __LINE__);
 	mutex_lock(&mask_info->lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired mask_info->lock\n", __func__, __LINE__);	
+
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on msg_mask_lock\n", __func__, __LINE__);
 	mutex_lock(&driver->msg_mask_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired msg_mask_lock\n", __func__, __LINE__);
 
 	mask = (struct diag_msg_mask_t *)(mask_info->ptr);
 	if (!mask->ptr) {
 		pr_err("diag: Invalid input in %s, mask->ptr: %pK\n",
 			__func__, mask->ptr);
 		mutex_unlock(&driver->msg_mask_lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released msg_mask_lock\n", __func__, __LINE__);
 		mutex_unlock(&mask_info->lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released mask_info->lock\n", __func__, __LINE__);
 		return -EINVAL;
 	}
 	msg_mask_tbl_count = (info) ? info->msg_mask_tbl_count :
@@ -2043,7 +2274,9 @@ int diag_copy_to_user_msg_mask(char __us
 			continue;
 		ptr = mask_info->update_buf;
 		len = 0;
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on mask->lock\n", __func__, __LINE__);
 		mutex_lock(&mask->lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired mask->lock\n", __func__, __LINE__);
 		header.ssid_first = mask->ssid_first;
 		header.ssid_last = mask->ssid_last_tools;
 		header.range = mask->range_tools;
@@ -2055,11 +2288,13 @@ int diag_copy_to_user_msg_mask(char __us
 			       __func__, mask->ssid_first,
 			       mask->ssid_last_tools);
 			mutex_unlock(&mask->lock);
+			DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released mask->lock\n", __func__, __LINE__);
 			continue;
 		}
 		memcpy(ptr + len, mask->ptr, copy_len);
 		len += copy_len;
 		mutex_unlock(&mask->lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released mask->lock\n", __func__, __LINE__);
 		/* + sizeof(int) to account for data_type already in buf */
 		if (total_len + sizeof(int) + len > count) {
 			pr_err("diag: In %s, unable to send msg masks to user space, total_len: %d, count: %zu\n",
@@ -2076,7 +2311,9 @@ int diag_copy_to_user_msg_mask(char __us
 		total_len += len;
 	}
 	mutex_unlock(&driver->msg_mask_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released msg_mask_lock\n", __func__, __LINE__);
 	mutex_unlock(&mask_info->lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released mask_info->lock\n", __func__, __LINE__);
 	return err ? err : total_len;
 }
 
@@ -2106,12 +2343,15 @@ int diag_copy_to_user_log_mask(char __us
 		return -EINVAL;
 	}
 
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on mask_info->lock\n", __func__, __LINE__);
 	mutex_lock(&mask_info->lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired mask_info->lock\n", __func__, __LINE__);
 	mask = (struct diag_log_mask_t *)(mask_info->ptr);
 	if (!mask->ptr) {
 		pr_err("diag: Invalid input in %s, mask->ptr: %pK\n",
 			__func__, mask->ptr);
 		mutex_unlock(&mask_info->lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released mask_info->lock\n", __func__, __LINE__);
 		return -EINVAL;
 	}
 	for (i = 0; i < MAX_EQUIP_ID; i++, mask++) {
@@ -2119,7 +2359,9 @@ int diag_copy_to_user_log_mask(char __us
 			continue;
 		ptr = mask_info->update_buf;
 		len = 0;
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on mask->lock\n", __func__, __LINE__);
 		mutex_lock(&mask->lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired mask->lock\n", __func__, __LINE__);
 		header.equip_id = mask->equip_id;
 		header.num_items = mask->num_items_tools;
 		memcpy(ptr, &header, sizeof(header));
@@ -2129,11 +2371,13 @@ int diag_copy_to_user_log_mask(char __us
 			pr_err("diag: In %s, no space to update log mask, equip_id: %d\n",
 			       __func__, mask->equip_id);
 			mutex_unlock(&mask->lock);
+			DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released mask->lock\n", __func__, __LINE__);
 			continue;
 		}
 		memcpy(ptr + len, mask->ptr, copy_len);
 		len += copy_len;
 		mutex_unlock(&mask->lock);
+		DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released mask->lock\n", __func__, __LINE__);
 		/* + sizeof(int) to account for data_type already in buf */
 		if (total_len + sizeof(int) + len > count) {
 			pr_err("diag: In %s, unable to send log masks to user space, total_len: %d, count: %zu\n",
@@ -2150,6 +2394,7 @@ int diag_copy_to_user_log_mask(char __us
 		total_len += len;
 	}
 	mutex_unlock(&mask_info->lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released mask_info->lock\n", __func__, __LINE__);
 
 	return err ? err : total_len;
 }
@@ -2159,9 +2404,14 @@ void diag_send_updates_peripheral(uint8_
 	diag_send_feature_mask_update(peripheral);
 	if (driver->time_sync_enabled)
 		diag_send_time_sync_update(peripheral);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: waiting on md_session_lock\n", __func__, __LINE__);
+	mutex_lock(&driver->md_session_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: acquired md_session_lock\n", __func__, __LINE__);
 	diag_send_msg_mask_update(peripheral, ALL_SSID, ALL_SSID);
 	diag_send_log_mask_update(peripheral, ALL_EQUIP_ID);
 	diag_send_event_mask_update(peripheral);
+	mutex_unlock(&driver->md_session_lock);
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS, "%s:%d: released md_session_lock\n", __func__, __LINE__);
 	diag_send_real_time_update(peripheral,
 				driver->real_time_mode[DIAG_LOCAL_PROC]);
 	diag_send_peripheral_buffering_mode(
@@ -2177,6 +2427,8 @@ int diag_process_apps_masks(unsigned cha
 
 	if (!buf || len <= 0)
 		return -EINVAL;
+	
+	DIAG_LOG(DIAG_DEBUG_PERIPHERALS,"diag cmd = %d, sub_cmd = %d", *buf, *(int *)(buf + sizeof(int)));
 
 	if (*buf == DIAG_CMD_LOG_CONFIG) {
 		sub_cmd = *(int *)(buf + sizeof(int));
