--- original/drivers/regulator/cpr3-util.c	2020-05-07 08:06:16.722237910 +0200
+++ changed/drivers/regulator/cpr3-util.c	2019-06-03 13:39:52.000000000 +0200
@@ -1093,6 +1093,7 @@ static int cpr3_panic_notifier_init(stru
 				regs[i].addr);
 			return -EINVAL;
 		}
+
 		regs[i].value = 0xFFFFFFFF;
 	}
 
@@ -1388,7 +1389,7 @@ void cpr3_print_quots(struct cpr3_regula
 		for (j = 0, pos = 0; j < CPR3_RO_COUNT; j++)
 			pos += scnprintf(buf + pos, buflen - pos, " %u",
 				vreg->corner[i].target_quot[j]);
-		cpr3_debug(vreg, "target quots[%2d]:%s\n", i, buf);
+		cpr3_info(vreg, "target quots[%2d]:%s\n", i, buf);
 	}
 
 	kfree(buf);
@@ -2062,3 +2063,127 @@ done:
 	kfree(tmp);
 	return rc;
 }
+
+#ifdef CONFIG_SEC_AP_HEALTH
+struct {
+	struct cpr3_controller *ctrl;
+	int *fuse_volt;
+} apps_cpr_saved_info[2];
+
+int cpr3_save_fused_open_loop_voltage(struct cpr3_regulator *vreg, int *fuse_volt)
+{
+	int id;
+
+	if (!vreg) {
+		cpr3_err(vreg, "fail to save fused open loop voltage.\n");
+		return -1;
+	}
+
+	id = vreg->thread->ctrl->ctrl_id;
+	if (id >= 2) {
+		cpr3_err(vreg, "fail to save fused open loop voltage. id(%d)\n", id);
+		return -1;
+	}
+
+	if (apps_cpr_saved_info[id].ctrl) {
+		cpr3_err(vreg, "fail to save fused open loop voltage. id(%d), ctrl(%p)\n",
+			id, apps_cpr_saved_info[id].ctrl);
+		return -1;
+	}
+
+	apps_cpr_saved_info[id].ctrl = vreg->thread->ctrl;
+
+	apps_cpr_saved_info[id].fuse_volt = kcalloc(vreg->fuse_corner_count,
+				sizeof(*fuse_volt), GFP_KERNEL);
+
+	memcpy((void *)apps_cpr_saved_info[id].fuse_volt, (void *)fuse_volt,
+		vreg->fuse_corner_count * sizeof(*fuse_volt));
+
+	return 0;
+}
+
+int cpr3_get_fuse_open_loop_voltage(int id, int fuse_corner)
+{
+	struct cpr3_controller *ctrl;
+
+	if (!apps_cpr_saved_info[id].ctrl) {
+		pr_err("%s : cpr info isn't saved. id(%d)\n", __func__, id);
+		return -1;
+	}
+
+	ctrl = apps_cpr_saved_info[id].ctrl;
+	if (fuse_corner >= ctrl->thread->vreg->fuse_corner_count) {
+		pr_err("%s : cpr info isn't saved. id(%d), corner(%d)\n",
+			__func__, id, fuse_corner);
+		return -2;
+	}
+
+	if (!apps_cpr_saved_info[id].fuse_volt) {
+		pr_err("%s : cpr info is invalid. id(%d)\n", __func__, id);
+		return -3;
+	}
+
+	return apps_cpr_saved_info[id].fuse_volt[fuse_corner];
+}
+EXPORT_SYMBOL(cpr3_get_fuse_open_loop_voltage);
+
+int cpr3_get_fuse_corner_count(int id)
+{
+	struct cpr3_controller *ctrl;
+
+	if (!apps_cpr_saved_info[id].ctrl) {
+		pr_err("%s : cpr info isn't saved. id(%d)\n", __func__, id);
+		return -1;
+	}
+
+	ctrl = apps_cpr_saved_info[id].ctrl;
+
+	if (!ctrl->thread || !ctrl->thread->vreg) {
+		pr_err("%s : cpr info is invalid. id(%d)\n", __func__, id);
+		return -2;
+	}
+
+	return ctrl->thread->vreg->fuse_corner_count;
+}
+EXPORT_SYMBOL(cpr3_get_fuse_corner_count);
+
+int cpr3_get_fuse_cpr_rev(int id)
+{
+	struct cpr3_controller *ctrl;
+
+	if (!apps_cpr_saved_info[id].ctrl) {
+		pr_err("%s : cpr info isn't saved. id(%d)\n", __func__, id);
+		return -1;
+	}
+
+	ctrl = apps_cpr_saved_info[id].ctrl;
+
+	if (!ctrl->thread || !ctrl->thread->vreg) {
+		pr_err("%s : cpr info is invalid. id(%d)\n", __func__, id);
+		return -2;
+	}
+
+	return ctrl->thread->vreg->cpr_rev_fuse;
+}
+EXPORT_SYMBOL(cpr3_get_fuse_cpr_rev);
+
+int cpr3_get_fuse_speed_bin(int id)
+{
+	struct cpr3_controller *ctrl;
+
+	if (!apps_cpr_saved_info[id].ctrl) {
+		pr_err("%s : cpr info isn't saved. id(%d)\n", __func__, id);
+		return -1;
+	}
+
+	ctrl = apps_cpr_saved_info[id].ctrl;
+
+	if (!ctrl->thread || !ctrl->thread->vreg) {
+		pr_err("%s : cpr info is invalid. id(%d)\n", __func__, id);
+		return -2;
+	}
+
+	return ctrl->thread->vreg->speed_bin_fuse;
+}
+EXPORT_SYMBOL(cpr3_get_fuse_speed_bin);
+#endif /* CONFIG_SEC_AP_HEALTH */
\ Geen regeleindeteken (LF) aan einde van bestand
