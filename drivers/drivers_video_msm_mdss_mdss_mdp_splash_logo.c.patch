--- original/drivers/video/msm/mdss/mdss_mdp_splash_logo.c	2020-05-07 08:31:26.126784181 +0200
+++ changed/drivers/video/msm/mdss/mdss_mdp_splash_logo.c	2019-06-03 13:39:53.000000000 +0200
@@ -29,6 +29,10 @@
 #include "mdss_mdp_splash_logo.h"
 #include "mdss_smmu.h"
 
+#if defined(CONFIG_FB_MSM_MDSS_SAMSUNG) && defined(CONFIG_SEC_DEBUG)
+#include <linux/sec_debug.h>
+#endif
+
 #define INVALID_PIPE_INDEX 0xFFFF
 #define MAX_FRAME_DONE_COUNT_WAIT 2
 
@@ -230,6 +234,7 @@ void mdss_mdp_release_splash_pipe(struct
 void mdss_free_bootmem(u32 mem_addr, u32 size)
 {
 	unsigned long pfn_start, pfn_end, pfn_idx;
+	free_memsize_reserved(mem_addr, size);
 	pfn_start = mem_addr >> PAGE_SHIFT;
 	pfn_end = (mem_addr + size) >> PAGE_SHIFT;
 	for (pfn_idx = pfn_start; pfn_idx < pfn_end; pfn_idx++)
@@ -262,10 +267,19 @@ int mdss_mdp_splash_cleanup(struct msm_f
 		if (mfd->splash_info.iommu_dynamic_attached &&
 			use_borderfill) {
 			mdss_mdp_splash_unmap_splash_mem(mfd);
+#if defined(CONFIG_FB_MSM_MDSS_SAMSUNG) && defined(CONFIG_SEC_DEBUG)
+			if (!sec_debug_is_enabled()) {
+				memblock_free(mdp5_data->splash_mem_addr,
+						mdp5_data->splash_mem_size);
+				mdss_free_bootmem(mdp5_data->splash_mem_addr,
+						mdp5_data->splash_mem_size);
+			}
+#else
 			memblock_free(mdp5_data->splash_mem_addr,
 					mdp5_data->splash_mem_size);
 			mdss_free_bootmem(mdp5_data->splash_mem_addr,
 					mdp5_data->splash_mem_size);
+#endif
 		}
 		goto end;
 	}
@@ -331,9 +345,17 @@ int mdss_mdp_splash_cleanup(struct msm_f
 		!mfd->splash_info.iommu_dynamic_attached) {
 		pr_debug("free splash mem for display %d\n",
 						mfd->panel_info->pdest);
+#if defined(CONFIG_FB_MSM_MDSS_SAMSUNG) && defined(CONFIG_SEC_DEBUG)
+		if (!sec_debug_is_enabled()) {
+			/* Give back the reserved memory to the system */
+			memblock_free(splash_mem_addr, splash_mem_size);
+			mdss_free_bootmem(splash_mem_addr, splash_mem_size);
+		}
+#else
 		/* Give back the reserved memory to the system */
 		memblock_free(splash_mem_addr, splash_mem_size);
 		mdss_free_bootmem(splash_mem_addr, splash_mem_size);
+#endif
 
 		mdss_mdp_footswitch_ctrl_splash(0);
 		goto end;
@@ -341,6 +363,15 @@ int mdss_mdp_splash_cleanup(struct msm_f
 
 	if (mdp5_data->splash_mem_addr &&
 		!mfd->splash_info.iommu_dynamic_attached) {
+#if defined(CONFIG_FB_MSM_MDSS_SAMSUNG) && defined(CONFIG_SEC_DEBUG)
+		if (!sec_debug_is_enabled()) {
+			/* Give back the reserved memory to the system */
+			memblock_free(mdp5_data->splash_mem_addr,
+						mdp5_data->splash_mem_size);
+			mdss_free_bootmem(mdp5_data->splash_mem_addr,
+						mdp5_data->splash_mem_size);
+		}
+#else
 		pr_debug("free splash mem for display %d\n",
 						mfd->panel_info->pdest);
 		/* Give back the reserved memory to the system */
@@ -348,8 +379,8 @@ int mdss_mdp_splash_cleanup(struct msm_f
 					mdp5_data->splash_mem_size);
 		mdss_free_bootmem(mdp5_data->splash_mem_addr,
 					mdp5_data->splash_mem_size);
+#endif
 	}
-
 	mdss_mdp_footswitch_ctrl_splash(0);
 end:
 	return rc;
@@ -718,17 +749,26 @@ static __ref int mdss_mdp_splash_parse_d
 
 	mdp5_mdata->splash_mem_addr = offsets[0];
 	mdp5_mdata->splash_mem_size = offsets[1];
-	pr_debug("memaddr=%x size=%x\n", mdp5_mdata->splash_mem_addr,
+	pr_info("memaddr=%x size=%x\n", mdp5_mdata->splash_mem_addr,
 		mdp5_mdata->splash_mem_size);
 
 error:
 	if (!rc && !mfd->panel_info->cont_splash_enabled &&
 		mdp5_mdata->splash_mem_addr) {
 		pr_debug("mem reservation not reqd if cont splash disabled\n");
+#if defined(CONFIG_FB_MSM_MDSS_SAMSUNG) && defined(CONFIG_SEC_DEBUG)
+		if (!sec_debug_is_enabled()) {
+			memblock_free(mdp5_mdata->splash_mem_addr,
+						mdp5_mdata->splash_mem_size);
+			mdss_free_bootmem(mdp5_mdata->splash_mem_addr,
+						mdp5_mdata->splash_mem_size);
+		}
+#else
 		memblock_free(mdp5_mdata->splash_mem_addr,
 					mdp5_mdata->splash_mem_size);
 		mdss_free_bootmem(mdp5_mdata->splash_mem_addr,
 					mdp5_mdata->splash_mem_size);
+#endif
 	} else if (rc && mfd->panel_info->cont_splash_enabled) {
 		pr_err("no rsvd mem found in DT for splash screen\n");
 	} else {
