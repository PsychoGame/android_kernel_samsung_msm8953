--- original/include/uapi/linux/mmc/ioctl.h	2020-05-07 08:06:21.902187010 +0200
+++ changed/include/uapi/linux/mmc/ioctl.h	2019-06-03 13:39:53.000000000 +0200
@@ -45,7 +45,27 @@ struct mmc_ioc_cmd {
 };
 #define mmc_ioc_cmd_set_data(ic, ptr) ic.data_ptr = (__u64)(unsigned long) ptr
 
+/**
+ * struct mmc_ioc_multi_cmd - multi command information
+ * @num_of_cmds: Number of commands to send. Must be equal to or less than
+ *	MMC_IOC_MAX_CMDS.
+ * @cmds: Array of commands with length equal to 'num_of_cmds'
+ */
+struct mmc_ioc_multi_cmd {
+	__u64 num_of_cmds;
+	struct mmc_ioc_cmd cmds[0];
+};
+
 #define MMC_IOC_CMD _IOWR(MMC_BLOCK_MAJOR, 0, struct mmc_ioc_cmd)
+#define MMC_IOC_BUSWIDTH _IO(MMC_BLOCK_MAJOR, 0xCB)
+#define MMC_IOC_CLOCK _IO(MMC_BLOCK_MAJOR, 0xCC)
+/*
+ * MMC_IOC_MULTI_CMD: Used to send an array of MMC commands described by
+ *	the structure mmc_ioc_multi_cmd. The MMC driver will issue all
+ *	commands in array in sequence to card.
+ */
+#define MMC_IOC_MULTI_CMD _IOWR(MMC_BLOCK_MAJOR, 1, struct mmc_ioc_multi_cmd)
+
 
 /**
  * There are four request types that are applicable for rpmb accesses- two
@@ -107,5 +127,8 @@ struct mmc_ioc_rpmb {
  * is enforced per ioctl call.  For larger data transfers, use the normal
  * block device operations.
  */
-#define MMC_IOC_MAX_BYTES  (512L * 256)
+
+#define MMC_IOC_MAX_BYTES  (512L * 512 * 2)
+#define MMC_IOC_MAX_CMDS    255
+
 #endif /* LINUX_MMC_IOCTL_H */
