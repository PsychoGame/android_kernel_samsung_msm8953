--- original/net/netfilter/xt_connmark.c	2020-05-07 08:06:23.272173549 +0200
+++ changed/net/netfilter/xt_connmark.c	2019-06-03 13:39:54.000000000 +0200
@@ -5,6 +5,7 @@
  *	by Henrik Nordstrom <hno@marasystems.com>
  *	Copyright Â© CC Computer Consultants GmbH, 2007 - 2008
  *	Jan Engelhardt <jengelh@medozas.de>
+ *      Copyright (c) 2015 Samsung Electronics Co., Ltd.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -19,6 +20,14 @@
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, see <http://www.gnu.org/licenses/>.
  */
+/*
+ *  Changes:
+ *  KwnagHyun Kim <kh0304.kim@samsung.com> 2015/07/08
+ *  Baesung Park  <baesung.park@samsung.com> 2015/07/08
+ *  Vignesh Saravanaperumal <vignesh1.s@samsung.com> 2015/07/08
+ *    Add codes to share UID/PID information
+ *
+ */
 
 #include <linux/module.h>
 #include <linux/skbuff.h>
@@ -27,6 +36,13 @@
 #include <linux/netfilter/x_tables.h>
 #include <linux/netfilter/xt_connmark.h>
 
+// ------------- START of KNOX_VPN ------------------//
+#include <linux/types.h>
+#include <linux/tcp.h>
+#include <linux/ip.h>
+#include <net/ip.h>
+// ------------- END of KNOX_VPN -------------------//
+
 MODULE_AUTHOR("Henrik Nordstrom <hno@marasystems.com>");
 MODULE_DESCRIPTION("Xtables: connection mark operations");
 MODULE_LICENSE("GPL");
@@ -35,6 +51,66 @@ MODULE_ALIAS("ip6t_CONNMARK");
 MODULE_ALIAS("ipt_connmark");
 MODULE_ALIAS("ip6t_connmark");
 
+// ------------- START of KNOX_VPN ------------------//
+
+/* KNOX framework uses mark value 100 to 500
+ * when the special meta data is added
+ * This will indicate to the kernel code that
+ * it needs to append meta data to the packets
+ */
+
+#define META_MARK_BASE_LOWER 100
+#define META_MARK_BASE_UPPER 500
+
+/* Structure to hold metadata values
+ * intended for VPN clients to make
+ * more intelligent decisions
+ * when the KNOX meta mark
+ * feature is enabled
+ */
+
+struct knox_meta_param {
+    uid_t uid;
+    pid_t pid;
+};
+
+static unsigned int knoxvpn_uidpid(struct sk_buff *skb, u_int32_t newmark)
+{
+	int szMetaData;
+	struct skb_shared_info *knox_shinfo = NULL;
+
+	szMetaData = sizeof(struct knox_meta_param);
+	if (skb != NULL) {
+		knox_shinfo = skb_shinfo(skb);
+	} else {
+		pr_err("KNOX: NULL SKB - no KNOX processing");
+		return -1;
+	}
+
+	if( skb->sk == NULL) {
+		pr_err("KNOX: skb->sk value is null");
+		return -1;
+	}
+
+	if( knox_shinfo == NULL) {
+		pr_err("KNOX: knox_shinfo is null");
+		return -1;
+	}
+
+	if (newmark < META_MARK_BASE_LOWER || newmark > META_MARK_BASE_UPPER) {
+		pr_err("KNOX: The mark is out of range");
+		return -1;
+	} else {
+		knox_shinfo->uid = skb->sk->knox_uid;
+		knox_shinfo->pid = skb->sk->knox_pid;
+		knox_shinfo->knox_mark = newmark;
+	}
+
+	return 0;
+}
+
+// ------------- END of KNOX_VPN -------------------//
+
 static unsigned int
 connmark_tg(struct sk_buff *skb, const struct xt_action_param *par)
 {
@@ -67,6 +143,10 @@ connmark_tg(struct sk_buff *skb, const s
 		newmark = (skb->mark & ~info->nfmask) ^
 		          (ct->mark & info->ctmask);
 		skb->mark = newmark;
+// ------------- START of KNOX_VPN -----------------//
+		knoxvpn_uidpid(skb, newmark);
+// ------------- END of KNOX_VPN -------------------//
+
 		break;
 	}
 
