--- original/mm/vmpressure.c	2020-05-07 08:06:22.620179955 +0200
+++ changed/mm/vmpressure.c	2019-06-03 13:39:54.000000000 +0200
@@ -24,7 +24,6 @@
 #include <linux/printk.h>
 #include <linux/notifier.h>
 #include <linux/init.h>
-#include <linux/module.h>
 #include <linux/vmpressure.h>
 
 /*
@@ -52,15 +51,6 @@ static const unsigned long vmpressure_wi
 static const unsigned int vmpressure_level_med = 60;
 static const unsigned int vmpressure_level_critical = 95;
 
-static unsigned long vmpressure_scale_max = 100;
-module_param_named(vmpressure_scale_max, vmpressure_scale_max,
-			ulong, S_IRUGO | S_IWUSR);
-
-/* vmpressure values >= this will be scaled based on allocstalls */
-static unsigned long allocstall_threshold = 70;
-module_param_named(allocstall_threshold, allocstall_threshold,
-			ulong, S_IRUGO | S_IWUSR);
-
 static struct vmpressure global_vmpressure;
 BLOCKING_NOTIFIER_HEAD(vmpressure_notifier);
 
@@ -167,19 +157,6 @@ static unsigned long vmpressure_calc_pre
 	return pressure;
 }
 
-static unsigned long vmpressure_account_stall(unsigned long pressure,
-				unsigned long stall, unsigned long scanned)
-{
-	unsigned long scale;
-
-	if (pressure < allocstall_threshold)
-		return pressure;
-
-	scale = ((vmpressure_scale_max - pressure) * stall) / scanned;
-
-	return pressure + scale;
-}
-
 struct vmpressure_event {
 	struct eventfd_ctx *efd;
 	enum vmpressure_levels level;
@@ -196,6 +173,7 @@ static bool vmpressure_event(struct vmpr
 
 	pressure = vmpressure_calc_pressure(scanned, reclaimed);
 	level = vmpressure_level(pressure);
+	vmpr->pressure = pressure;
 
 	mutex_lock(&vmpr->events_lock);
 
@@ -295,7 +273,6 @@ void vmpressure_global(gfp_t gfp, unsign
 {
 	struct vmpressure *vmpr = &global_vmpressure;
 	unsigned long pressure;
-	unsigned long stall;
 
 	if (!(gfp & (__GFP_HIGHMEM | __GFP_MOVABLE | __GFP_IO | __GFP_FS)))
 		return;
@@ -307,10 +284,6 @@ void vmpressure_global(gfp_t gfp, unsign
 	vmpr->scanned += scanned;
 	vmpr->reclaimed += reclaimed;
 
-	if (!current_is_kswapd())
-		vmpr->stall += scanned;
-
-	stall = vmpr->stall;
 	scanned = vmpr->scanned;
 	reclaimed = vmpr->reclaimed;
 	spin_unlock(&vmpr->sr_lock);
@@ -321,11 +294,9 @@ void vmpressure_global(gfp_t gfp, unsign
 	spin_lock(&vmpr->sr_lock);
 	vmpr->scanned = 0;
 	vmpr->reclaimed = 0;
-	vmpr->stall = 0;
 	spin_unlock(&vmpr->sr_lock);
 
 	pressure = vmpressure_calc_pressure(scanned, reclaimed);
-	pressure = vmpressure_account_stall(pressure, stall, scanned);
 	vmpressure_notify(pressure);
 }
 
