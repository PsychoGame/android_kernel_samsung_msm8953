--- original/kernel/softirq.c	2020-05-07 08:06:22.352182589 +0200
+++ changed/kernel/softirq.c	2019-06-03 13:39:54.000000000 +0200
@@ -29,6 +29,7 @@
 
 #define CREATE_TRACE_POINTS
 #include <trace/events/irq.h>
+#include <linux/sec_debug.h>
 
 /*
    - No shared variables, all the data are CPU local.
@@ -266,7 +267,10 @@ restart:
 		kstat_incr_softirqs_this_cpu(vec_nr);
 
 		trace_softirq_entry(vec_nr);
+
+		sec_debug_irq_sched_log(vec_nr, h->action, "softirq", SOFTIRQ_ENTRY);
 		h->action(h);
+		sec_debug_irq_sched_log(vec_nr, h->action, "softirq", SOFTIRQ_EXIT);
 		trace_softirq_exit(vec_nr);
 		if (unlikely(prev_count != preempt_count())) {
 			pr_err("huh, entered softirq %u %s %p with preempt_count %08x, exited with %08x?\n",
@@ -389,6 +393,7 @@ void irq_exit(void)
 	tick_irq_exit();
 	rcu_irq_exit();
 	trace_hardirq_exit(); /* must be last! */
+	secdbg_msg("hardirq exit");
 }
 
 /*
@@ -498,7 +503,10 @@ static void tasklet_action(struct softir
 				if (!test_and_clear_bit(TASKLET_STATE_SCHED,
 							&t->state))
 					BUG();
+				sec_debug_irq_sched_log(-1, t->func, "tasket_actoin", SOFTIRQ_ENTRY);
 				t->func(t->data);
+				sec_debug_irq_sched_log(-1, t->func, "tasket_actoin", SOFTIRQ_EXIT);
+
 				tasklet_unlock(t);
 				continue;
 			}
