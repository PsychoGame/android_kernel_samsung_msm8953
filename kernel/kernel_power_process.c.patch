--- original/kernel/power/process.c	2020-05-07 08:06:22.205184033 +0200
+++ changed/kernel/power/process.c	2019-06-03 13:39:53.000000000 +0200
@@ -25,7 +25,7 @@
  */
 unsigned int __read_mostly freeze_timeout_msecs = 20 * MSEC_PER_SEC;
 
-static int try_to_freeze_tasks(bool user_only)
+static int try_to_freeze_tasks(bool user_only, bool monitor_pmwake)
 {
 	struct task_struct *g, *p;
 	unsigned long end_time;
@@ -67,7 +67,7 @@ static int try_to_freeze_tasks(bool user
 		if (!todo || time_after(jiffies, end_time))
 			break;
 
-		if (pm_wakeup_pending()) {
+		if (monitor_pmwake && pm_wakeup_pending()) {
 #ifdef CONFIG_PM_SLEEP
 			pm_get_active_wakeup_sources(suspend_abort,
 				MAX_SUSPEND_ABORT_LEN);
@@ -92,7 +92,7 @@ static int try_to_freeze_tasks(bool user
 	do_div(elapsed_msecs64, NSEC_PER_MSEC);
 	elapsed_msecs = elapsed_msecs64;
 
-	if (wakeup) {
+	if (monitor_pmwake && wakeup) {
 		printk("\n");
 		printk(KERN_ERR "Freezing of tasks aborted after %d.%03d seconds",
 		       elapsed_msecs / 1000, elapsed_msecs % 1000);
@@ -149,15 +149,28 @@ static bool check_frozen_processes(void)
  *
  * On success, returns 0.  On failure, -errno and system is fully thawed.
  */
+static bool system_in_shutdown(void)
+{
+
+	return (system_state == SYSTEM_RESTART) ||
+		(system_state == SYSTEM_HALT) ||
+		(system_state == SYSTEM_POWER_OFF);
+}
 int freeze_processes(void)
 {
 	int error;
 	int oom_kills_saved;
+	bool system_running = true;
 
 	error = __usermodehelper_disable(UMH_FREEZING);
 	if (error)
 		return error;
 
+	if (system_in_shutdown()) {
+		printk("System is shuting down ...\n");
+		system_running = false;
+	}
+
 	/* Make sure this task doesn't get frozen */
 	current->flags |= PF_SUSPEND_TASK;
 
@@ -168,7 +181,7 @@ int freeze_processes(void)
 	printk("Freezing user space processes ... ");
 	pm_freezing = true;
 	oom_kills_saved = oom_kills_count();
-	error = try_to_freeze_tasks(true);
+	error = try_to_freeze_tasks(true, system_running);
 	if (!error) {
 		__usermodehelper_set_disable_depth(UMH_DISABLED);
 		oom_killer_disable();
@@ -190,7 +203,7 @@ int freeze_processes(void)
 	printk("\n");
 	BUG_ON(in_atomic());
 
-	if (error)
+	if (system_running && error)
 		thaw_processes();
 	return error;
 }
@@ -209,7 +222,7 @@ int freeze_kernel_threads(void)
 
 	printk("Freezing remaining freezable tasks ... ");
 	pm_nosig_freezing = true;
-	error = try_to_freeze_tasks(false);
+	error = try_to_freeze_tasks(false, true);
 	if (!error)
 		printk("done.");
 
