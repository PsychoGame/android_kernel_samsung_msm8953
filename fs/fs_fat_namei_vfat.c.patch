--- original/fs/fat/namei_vfat.c	2020-05-07 08:06:20.141204314 +0200
+++ changed/fs/fat/namei_vfat.c	2019-06-03 13:39:53.000000000 +0200
@@ -23,6 +23,31 @@
 #include <linux/namei.h>
 #include "fat.h"
 
+#define VFAT_DSTATE_LOCKED	(void *)(0xCAFE2016)
+#define VFAT_DSTATE_UNLOCKED	(void *)(0x0)
+static inline void __lock_d_revalidate(struct dentry *dentry)
+{
+	spin_lock(&dentry->d_lock);
+	dentry->d_fsdata = VFAT_DSTATE_LOCKED;
+	spin_unlock(&dentry->d_lock);
+}
+
+static inline void __unlock_d_revalidate(struct dentry *dentry)
+{
+	spin_lock(&dentry->d_lock);
+	dentry->d_fsdata = VFAT_DSTATE_UNLOCKED;
+	spin_unlock(&dentry->d_lock);
+}
+
+/* __check_dstate_locked requires dentry->d_lock */
+static inline int __check_dstate_locked(struct dentry *dentry)
+{
+	if (dentry->d_fsdata == VFAT_DSTATE_LOCKED)
+		return 1;
+
+	return 0;
+}
+
 /*
  * If new entry was created in the parent, it could create the 8.3
  * alias (the shortname of logname).  So, the parent may have the
@@ -35,8 +60,10 @@ static int vfat_revalidate_shortname(str
 {
 	int ret = 1;
 	spin_lock(&dentry->d_lock);
-	if (dentry->d_time != dentry->d_parent->d_inode->i_version)
+	if ((!dentry->d_inode) && (!__check_dstate_locked(dentry)) &&
+		(dentry->d_time != dentry->d_parent->d_inode->i_version)) {
 		ret = 0;
+	}
 	spin_unlock(&dentry->d_lock);
 	return ret;
 }
@@ -69,7 +96,7 @@ static int vfat_revalidate_ci(struct den
 	 */
 	if (dentry->d_inode)
 		return 1;
-
+#if 0
 	/*
 	 * This may be nfsd (or something), anyway, we can't see the
 	 * intent of this. So, since this can be for creation, drop it.
@@ -84,7 +111,7 @@ static int vfat_revalidate_ci(struct den
 	 */
 	if (flags & (LOOKUP_CREATE | LOOKUP_RENAME_TARGET))
 		return 0;
-
+#endif
 	return vfat_revalidate_shortname(dentry);
 }
 
@@ -783,12 +810,15 @@ static int vfat_create(struct inode *dir
 	err = vfat_add_entry(dir, &dentry->d_name, 0, 0, &ts, &sinfo);
 	if (err)
 		goto out;
+
+	__lock_d_revalidate(dentry);
 	dir->i_version++;
 
 	inode = fat_build_inode(sb, sinfo.de, sinfo.i_pos);
 	brelse(sinfo.bh);
 	if (IS_ERR(inode)) {
 		err = PTR_ERR(inode);
+		__unlock_d_revalidate(dentry);
 		goto out;
 	}
 	inode->i_version++;
@@ -796,6 +826,7 @@ static int vfat_create(struct inode *dir
 	/* timestamp is already written, so mark_inode_dirty() is unneeded. */
 
 	d_instantiate(dentry, inode);
+	__unlock_d_revalidate(dentry);
 out:
 	mutex_unlock(&MSDOS_SB(sb)->s_lock);
 	return err;
@@ -877,6 +908,7 @@ static int vfat_mkdir(struct inode *dir,
 	err = vfat_add_entry(dir, &dentry->d_name, 1, cluster, &ts, &sinfo);
 	if (err)
 		goto out_free;
+	__lock_d_revalidate(dentry);
 	dir->i_version++;
 	inc_nlink(dir);
 
@@ -885,6 +917,7 @@ static int vfat_mkdir(struct inode *dir,
 	if (IS_ERR(inode)) {
 		err = PTR_ERR(inode);
 		/* the directory was completed, just return a error */
+		__unlock_d_revalidate(dentry);
 		goto out;
 	}
 	inode->i_version++;
@@ -894,6 +927,7 @@ static int vfat_mkdir(struct inode *dir,
 
 	d_instantiate(dentry, inode);
 
+	__unlock_d_revalidate(dentry);
 	mutex_unlock(&MSDOS_SB(sb)->s_lock);
 	return 0;
 
@@ -949,6 +983,9 @@ static int vfat_rename(struct inode *old
 			goto out;
 		new_i_pos = sinfo.i_pos;
 	}
+
+	__lock_d_revalidate(old_dentry);
+	__lock_d_revalidate(new_dentry);
 	new_dir->i_version++;
 
 	fat_detach(old_inode);
@@ -990,6 +1027,8 @@ static int vfat_rename(struct inode *old
 			drop_nlink(new_inode);
 		new_inode->i_ctime = ts;
 	}
+	__unlock_d_revalidate(old_dentry);
+	__unlock_d_revalidate(new_dentry);
 out:
 	brelse(sinfo.bh);
 	brelse(dotdot_bh);
@@ -1008,6 +1047,9 @@ error_dotdot:
 		corrupt |= sync_dirty_buffer(dotdot_bh);
 	}
 error_inode:
+	__unlock_d_revalidate(old_dentry);
+	__unlock_d_revalidate(new_dentry);
+
 	fat_detach(old_inode);
 	fat_attach(old_inode, old_sinfo.i_pos);
 	if (new_inode) {
@@ -1041,6 +1083,12 @@ static const struct inode_operations vfa
 	.rename		= vfat_rename,
 	.setattr	= fat_setattr,
 	.getattr	= fat_getattr,
+#ifdef CONFIG_FAT_VIRTUAL_XATTR
+	.setxattr	= fat_setxattr,
+	.getxattr	= fat_getxattr,
+	.listxattr	= fat_listxattr,
+	.removexattr	= fat_removexattr,
+#endif
 };
 
 static void setup(struct super_block *sb)
