--- original/fs/ecryptfs/main.c	2020-05-07 08:31:26.344782219 +0200
+++ changed/fs/ecryptfs/main.c	2019-06-03 13:39:53.000000000 +0200
@@ -39,6 +39,15 @@
 #include <linux/magic.h>
 #include "ecryptfs_kernel.h"
 
+#ifdef CONFIG_SDP
+#include "mm.h"
+#include "ecryptfs_sdp_chamber.h"
+#endif
+
+#ifdef CONFIG_WTL_ENCRYPTION_FILTER
+#include <linux/ctype.h>
+#endif
+
 /**
  * Module parameter that defines the ecryptfs_verbosity level.
  */
@@ -175,6 +184,11 @@ void ecryptfs_put_lower_file(struct inod
 			if (ret)
 				pr_err("failed to sync file ret = %d.\n", ret);
 		}
+#ifdef CONFIG_SDP
+		if (inode_info->crypt_stat.flags & ECRYPTFS_DEK_IS_SENSITIVE) {
+			ecryptfs_mm_do_sdp_cleanup(inode);
+		}
+#endif
 		fput(inode_info->lower_file);
 		inode_info->lower_file = NULL;
 		mutex_unlock(&inode_info->lower_file_mutex);
@@ -201,6 +215,19 @@ enum { ecryptfs_opt_sig, ecryptfs_opt_ec
        ecryptfs_opt_fn_cipher, ecryptfs_opt_fn_cipher_key_bytes,
        ecryptfs_opt_unlink_sigs, ecryptfs_opt_mount_auth_tok_only,
        ecryptfs_opt_check_dev_ruid,
+#ifdef CONFIG_WTL_ENCRYPTION_FILTER
+       ecryptfs_opt_enable_filtering,
+#endif
+#ifdef CONFIG_CRYPTO_FIPS
+       ecryptfs_opt_enable_cc,
+#endif
+#ifdef CONFIG_SDP
+	ecryptfs_opt_userid, ecryptfs_opt_sdp, ecryptfs_opt_chamber_dirs, ecryptfs_opt_partition_id,
+#endif
+#ifdef CONFIG_DLP
+	   ecryptfs_opt_dlp,
+#endif
+       ecryptfs_opt_base, ecryptfs_opt_type, ecryptfs_opt_label,
        ecryptfs_opt_err };
 
 static const match_table_t tokens = {
@@ -218,6 +245,24 @@ static const match_table_t tokens = {
 	{ecryptfs_opt_unlink_sigs, "ecryptfs_unlink_sigs"},
 	{ecryptfs_opt_mount_auth_tok_only, "ecryptfs_mount_auth_tok_only"},
 	{ecryptfs_opt_check_dev_ruid, "ecryptfs_check_dev_ruid"},
+#ifdef CONFIG_WTL_ENCRYPTION_FILTER
+	{ecryptfs_opt_enable_filtering, "ecryptfs_enable_filtering=%s"},
+#endif
+#ifdef CONFIG_CRYPTO_FIPS
+	{ecryptfs_opt_enable_cc, "ecryptfs_enable_cc"},
+#endif
+#ifdef CONFIG_SDP
+	{ecryptfs_opt_chamber_dirs, "chamber=%s"},
+	{ecryptfs_opt_userid, "userid=%s"},
+    {ecryptfs_opt_sdp, "sdp_enabled"},
+    {ecryptfs_opt_partition_id, "partition_id=%u"},
+#endif
+#ifdef CONFIG_DLP
+	{ecryptfs_opt_dlp, "dlp_enabled"},
+#endif
+	{ecryptfs_opt_base, "base=%s"},
+	{ecryptfs_opt_type, "type=%s"},
+	{ecryptfs_opt_label, "label=%s"},
 	{ecryptfs_opt_err, NULL}
 };
 
@@ -257,8 +302,73 @@ static void ecryptfs_init_mount_crypt_st
 	INIT_LIST_HEAD(&mount_crypt_stat->global_auth_tok_list);
 	mutex_init(&mount_crypt_stat->global_auth_tok_list_mutex);
 	mount_crypt_stat->flags |= ECRYPTFS_MOUNT_CRYPT_STAT_INITIALIZED;
+
+#ifdef CONFIG_SDP
+	spin_lock_init(&mount_crypt_stat->chamber_dir_list_lock);
+	INIT_LIST_HEAD(&mount_crypt_stat->chamber_dir_list);
+
+	mount_crypt_stat->partition_id = -1;
+#endif
+}
+
+static void ecryptfs_init_propagate_stat(
+	struct ecryptfs_propagate_stat *propagate_stat)
+{
+	memset((void *)propagate_stat, 0,
+			sizeof(struct ecryptfs_propagate_stat));
+	propagate_stat->propagate_type = TYPE_E_NONE;
+}
+
+#ifdef CONFIG_WTL_ENCRYPTION_FILTER
+static int parse_enc_file_filter_parms(
+	struct ecryptfs_mount_crypt_stat *mcs, char *str)
+{
+	char *token = NULL;
+	int count = 0;
+	mcs->max_name_filter_len = 0;
+	while ((token = strsep(&str, "|")) != NULL) {
+		if (count >= ENC_NAME_FILTER_MAX_INSTANCE)
+			return -1;
+		strncpy(mcs->enc_filter_name[count++],
+			token, ENC_NAME_FILTER_MAX_LEN);
+		if (mcs->max_name_filter_len < strlen(token))
+			mcs->max_name_filter_len = strlen(token);
+	}
+	return 0;
 }
 
+static int parse_enc_ext_filter_parms(
+	struct ecryptfs_mount_crypt_stat *mcs, char *str)
+{
+	char *token = NULL;
+	int count = 0;
+	while ((token = strsep(&str, "|")) != NULL) {
+		if (count >= ENC_EXT_FILTER_MAX_INSTANCE)
+			return -1;
+		strncpy(mcs->enc_filter_ext[count++],
+			token, ENC_EXT_FILTER_MAX_LEN);
+	}
+	return 0;
+}
+
+static int parse_enc_filter_parms(
+	struct ecryptfs_mount_crypt_stat *mcs, char *str)
+{
+	char *token = NULL;
+	if (!strcmp("*", str)) {
+		mcs->flags |= ECRYPTFS_ENABLE_NEW_PASSTHROUGH;
+		return 0;
+	}
+	token = strsep(&str, ":");
+	if (token != NULL)
+		parse_enc_file_filter_parms(mcs, token);
+	token = strsep(&str, ":");
+	if (token != NULL)
+		parse_enc_ext_filter_parms(mcs, token);
+	return 0;
+}
+#endif
+
 /**
  * ecryptfs_parse_options
  * @sb: The ecryptfs super block
@@ -293,6 +403,8 @@ static int ecryptfs_parse_options(struct
 	int fn_cipher_key_bytes_set = 0;
 	struct ecryptfs_mount_crypt_stat *mount_crypt_stat =
 		&sbi->mount_crypt_stat;
+	struct ecryptfs_propagate_stat *propagate_stat =
+		&sbi->propagate_stat;
 	substring_t args[MAX_OPT_ARGS];
 	int token;
 	char *sig_src;
@@ -304,8 +416,16 @@ static int ecryptfs_parse_options(struct
 	char *fnek_src;
 	char *cipher_key_bytes_src;
 	char *fn_cipher_key_bytes_src;
+	char *base_path_src;
+	char *base_path_dst;
+	char *propagate_type;
+	char *label_src;
+	char *label_dst;
 	u8 cipher_code;
 	unsigned char final[2*ECRYPTFS_MAX_CIPHER_NAME_SIZE+1];
+#ifdef CONFIG_CRYPTO_FIPS
+	char cipher_mode[ECRYPTFS_MAX_CIPHER_MODE_SIZE+1] = ECRYPTFS_AES_ECB_MODE;
+#endif
 
 	*check_ruid = 0;
 
@@ -314,6 +434,7 @@ static int ecryptfs_parse_options(struct
 		goto out;
 	}
 	ecryptfs_init_mount_crypt_stat(mount_crypt_stat);
+	ecryptfs_init_propagate_stat(propagate_stat);
 	while ((p = strsep(&options, ",")) != NULL) {
 		if (!*p)
 			continue;
@@ -418,6 +539,102 @@ static int ecryptfs_parse_options(struct
 		case ecryptfs_opt_check_dev_ruid:
 			*check_ruid = 1;
 			break;
+#ifdef CONFIG_WTL_ENCRYPTION_FILTER
+		case ecryptfs_opt_enable_filtering:
+			rc = parse_enc_filter_parms(mount_crypt_stat,
+							 args[0].from);
+			if (rc) {
+				printk(KERN_ERR "Error attempting to parse encryption "
+							"filtering parameters.\n");
+				rc = -EINVAL;
+				goto out;
+			}
+			mount_crypt_stat->flags |= ECRYPTFS_ENABLE_FILTERING;
+			break;
+#endif
+#ifdef CONFIG_CRYPTO_FIPS
+		case ecryptfs_opt_enable_cc:
+			mount_crypt_stat->flags |= ECRYPTFS_ENABLE_CC;
+			strncpy(cipher_mode, ECRYPTFS_AES_CBC_MODE, ECRYPTFS_MAX_CIPHER_MODE_SIZE+1);
+			break;
+#endif
+#ifdef CONFIG_SDP
+		case ecryptfs_opt_userid: {
+			char *userid_src = args[0].from;
+			int userid =
+				(int)simple_strtol(userid_src,
+						&userid_src, 0);
+			sbi->userid = userid;
+			mount_crypt_stat->userid = userid;
+			/*
+			 * Enabling SDP by default for Knox container.
+			 */
+			mount_crypt_stat->flags |= ECRYPTFS_MOUNT_SDP_ENABLED;
+			}
+			break;
+		case ecryptfs_opt_sdp:
+			mount_crypt_stat->flags |= ECRYPTFS_MOUNT_SDP_ENABLED;
+			break;
+		case ecryptfs_opt_chamber_dirs: {
+			char *chamber_dirs = args[0].from;
+			char *token = NULL;
+
+			/**
+			 * chamber directories by mount-option.
+			 * The userid in the mount option is used as engine_id
+			 *
+			 * TODO : This won't work when chamber_dirs mount option comes before
+			 * user_id option.
+			 */
+			printk("%s : chamber dirs : %s\n", __func__, chamber_dirs);
+			while ((token = strsep(&chamber_dirs, "|")) != NULL)
+				if(!is_chamber_directory(mount_crypt_stat, (const unsigned char *)token, NULL))
+					add_chamber_directory(mount_crypt_stat,
+					        mount_crypt_stat->userid, (const unsigned char *)token);
+		}
+		break;
+		case ecryptfs_opt_partition_id: {
+            char *partition_id_str = args[0].from;
+            mount_crypt_stat->partition_id =
+                (int)simple_strtol(partition_id_str,
+                           &partition_id_str, 0);
+            printk("%s : partition_id : %d", __func__, mount_crypt_stat->partition_id);
+		}
+		break;
+#endif
+#ifdef CONFIG_DLP
+		case ecryptfs_opt_dlp:
+			mount_crypt_stat->flags |= ECRYPTFS_MOUNT_DLP_ENABLED;
+		break;
+#endif
+		case ecryptfs_opt_base:
+			base_path_src = args[0].from;
+			base_path_dst = propagate_stat->base_path;
+			strncpy(base_path_dst, base_path_src, ECRYPTFS_BASE_PATH_SIZE);
+			break;
+		case ecryptfs_opt_type:
+			propagate_type = match_strdup(&args[0]);
+			if (!propagate_type)
+				return -ENOMEM;
+			if (!strncmp(propagate_type, "default", strlen("default")))
+				propagate_stat->propagate_type = TYPE_E_DEFAULT;
+			else if (!strncmp(propagate_type, "read", strlen("read")))
+				propagate_stat->propagate_type = TYPE_E_READ;
+			else if (!strncmp(propagate_type, "write", strlen("write")))
+				propagate_stat->propagate_type = TYPE_E_WRITE;
+			else {
+				printk(KERN_WARNING
+					  "%s: eCryptfs: unrecognized option [type=%s]\n",
+					  __func__, propagate_type);
+				propagate_stat->propagate_type = TYPE_E_NONE;
+			}
+			kfree(propagate_type);
+			break;
+		case ecryptfs_opt_label:
+			label_src = args[0].from;
+			label_dst = propagate_stat->label;
+			strncpy(label_dst, label_src, ECRYPTFS_LABEL_SIZE);
+			break;
 		case ecryptfs_opt_err:
 		default:
 			printk(KERN_WARNING
@@ -460,6 +677,7 @@ static int ecryptfs_parse_options(struct
 				final, sizeof(final)),
 		mount_crypt_stat->global_default_cipher_key_size);
 	if (!cipher_code) {
+#ifdef __aarch64__
 		ecryptfs_printk(
 			KERN_ERR,
 			"eCryptfs doesn't support cipher: %s and key size %lu",
@@ -468,11 +686,63 @@ static int ecryptfs_parse_options(struct
 				mount_crypt_stat->global_default_cipher_mode,
 				final, sizeof(final)),
 			mount_crypt_stat->global_default_cipher_key_size);
+#else
+		ecryptfs_printk(
+			KERN_ERR,
+			"eCryptfs doesn't support cipher: %s and key size %lu",
+			ecryptfs_get_full_cipher(
+				mount_crypt_stat->global_default_cipher_name,
+				mount_crypt_stat->global_default_cipher_mode,
+				final, sizeof(final)),
+			(long unsigned int)(mount_crypt_stat->global_default_cipher_key_size));
+#endif
 		rc = -EINVAL;
 		goto out;
 	}
 
 	mutex_lock(&key_tfm_list_mutex);
+#ifdef CONFIG_CRYPTO_FIPS
+	if (!ecryptfs_tfm_exists(mount_crypt_stat->global_default_cipher_name, cipher_mode,
+			NULL)) {
+
+		rc = ecryptfs_add_new_key_tfm(
+			NULL, mount_crypt_stat->global_default_cipher_name,
+			mount_crypt_stat->global_default_cipher_key_size,
+			mount_crypt_stat->flags);
+		if (rc) {
+			printk(KERN_ERR "Error attempting to initialize "
+			       "cipher with name = [%s] and key size = [%td]; "
+			       "rc = [%d]\n",
+			       mount_crypt_stat->global_default_cipher_name,
+			       mount_crypt_stat->global_default_cipher_key_size,
+			       rc);
+			rc = -EINVAL;
+			mutex_unlock(&key_tfm_list_mutex);
+			goto out;
+		}
+	}
+
+	if ((mount_crypt_stat->flags & ECRYPTFS_GLOBAL_ENCRYPT_FILENAMES)
+		&& !ecryptfs_tfm_exists(
+			mount_crypt_stat->global_default_fn_cipher_name, cipher_mode, NULL)) {
+		rc = ecryptfs_add_new_key_tfm(
+			NULL, mount_crypt_stat->global_default_fn_cipher_name,
+			mount_crypt_stat->global_default_fn_cipher_key_bytes,
+			mount_crypt_stat->flags);
+
+		if (rc) {
+			printk(KERN_ERR "Error attempting to initialize "
+				   "cipher with name = [%s] and key size = [%td]; "
+				   "rc = [%d]\n",
+				   mount_crypt_stat->global_default_fn_cipher_name,
+				   mount_crypt_stat->global_default_fn_cipher_key_bytes,
+				   rc);
+			rc = -EINVAL;
+			mutex_unlock(&key_tfm_list_mutex);
+			goto out;
+		}
+	}
+#else
 	if (!ecryptfs_tfm_exists(mount_crypt_stat->global_default_cipher_name,
 				 NULL)) {
 		rc = ecryptfs_add_new_key_tfm(
@@ -508,6 +778,7 @@ static int ecryptfs_parse_options(struct
 			goto out;
 		}
 	}
+#endif
 	mutex_unlock(&key_tfm_list_mutex);
 	rc = ecryptfs_init_global_auth_toks(mount_crypt_stat);
 	if (rc)
@@ -531,7 +802,7 @@ static struct file_system_type ecryptfs_
 static struct dentry *ecryptfs_mount(struct file_system_type *fs_type, int flags,
 			const char *dev_name, void *raw_data)
 {
-	struct super_block *s;
+	struct super_block *s, *lower_sb;
 	struct ecryptfs_sb_info *sbi;
 	struct ecryptfs_mount_crypt_stat *mount_crypt_stat;
 	struct ecryptfs_dentry_info *root_info;
@@ -547,6 +818,10 @@ static struct dentry *ecryptfs_mount(str
 		goto out;
 	}
 
+#ifdef CONFIG_SDP
+	sbi->userid = -1;
+#endif
+
 	rc = ecryptfs_parse_options(sbi, raw_data, &check_ruid);
 	if (rc) {
 		err = "Error parsing options";
@@ -567,9 +842,13 @@ static struct dentry *ecryptfs_mount(str
 	ecryptfs_set_superblock_private(s, sbi);
 	s->s_bdi = &sbi->bdi;
 
+	if (sbi->propagate_stat.propagate_type != TYPE_E_NONE)
+	s->s_op = &ecryptfs_multimount_sops;
+	else
+	s->s_op = &ecryptfs_sops;
+	
 	/* ->kill_sb() will take care of sbi after that point */
 	sbi = NULL;
-	s->s_op = &ecryptfs_sops;
 	s->s_d_op = &ecryptfs_dops;
 
 	err = "Reading sb failed";
@@ -595,6 +874,8 @@ static struct dentry *ecryptfs_mount(str
 		goto out_free;
 	}
 
+	lower_sb = path.dentry->d_sb;
+	atomic_inc(&lower_sb->s_active);
 	ecryptfs_set_superblock_lower(s, path.dentry->d_sb);
 
 
@@ -632,18 +913,18 @@ static struct dentry *ecryptfs_mount(str
 	inode = ecryptfs_get_inode(path.dentry->d_inode, s);
 	rc = PTR_ERR(inode);
 	if (IS_ERR(inode))
-		goto out_free;
+		goto out_sput;
 
 	s->s_root = d_make_root(inode);
 	if (!s->s_root) {
 		rc = -ENOMEM;
-		goto out_free;
+		goto out_sput;
 	}
 
 	rc = -ENOMEM;
 	root_info = kmem_cache_zalloc(ecryptfs_dentry_info_cache, GFP_KERNEL);
 	if (!root_info)
-		goto out_free;
+		goto out_sput;
 
 	/* ->kill_sb() will take care of root_info */
 	ecryptfs_set_dentry_private(s->s_root, root_info);
@@ -652,6 +933,8 @@ static struct dentry *ecryptfs_mount(str
 	s->s_flags |= MS_ACTIVE;
 	return dget(s->s_root);
 
+out_sput:
+	atomic_dec(&lower_sb->s_active);
 out_free:
 	path_put(&path);
 out1:
@@ -677,6 +960,9 @@ static void ecryptfs_kill_block_super(st
 	kill_anon_super(sb);
 	if (!sb_info)
 		return;
+	if (sb_info->wsi_sb)
+		atomic_dec(&sb_info->wsi_sb->s_active);
+
 	ecryptfs_destroy_mount_crypt_stat(&sb_info->mount_crypt_stat);
 	bdi_destroy(&sb_info->bdi);
 	kmem_cache_free(ecryptfs_sb_info_cache, sb_info);
