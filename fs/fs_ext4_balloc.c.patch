--- original/fs/ext4/balloc.c	2020-05-07 08:31:26.358782093 +0200
+++ changed/fs/ext4/balloc.c	2019-06-03 13:39:53.000000000 +0200
@@ -17,6 +17,7 @@
 #include <linux/jbd2.h>
 #include <linux/quotaops.h>
 #include <linux/buffer_head.h>
+#include <linux/android_aid.h>
 #include "ext4.h"
 #include "ext4_jbd2.h"
 #include "mballoc.h"
@@ -451,9 +452,18 @@ ext4_read_block_bitmap_nowait(struct sup
 		goto verify;
 	}
 	ext4_lock_group(sb, block_group);
-	if (desc->bg_flags & cpu_to_le16(EXT4_BG_BLOCK_UNINIT)) {
-		int err;
-
+ 	if (ext4_has_group_desc_csum(sb) &&
+ 	    (desc->bg_flags & cpu_to_le16(EXT4_BG_BLOCK_UNINIT))) {
+ 		int err;
+ 
+ 		if (block_group == 0) {
+ 			ext4_unlock_group(sb, block_group);
+ 			unlock_buffer(bh);
+ 			ext4_error(sb, "Block bitmap for bg 0 marked "
+ 				   "uninitialized");
+ 			put_bh(bh);
+ 			return NULL;
+ 		}
 		err = ext4_init_block_bitmap(sb, bh, block_group, desc);
 		set_bitmap_uptodate(bh);
 		set_buffer_uptodate(bh);
@@ -543,7 +553,7 @@ ext4_read_block_bitmap(struct super_bloc
 static int ext4_has_free_clusters(struct ext4_sb_info *sbi,
 				  s64 nclusters, unsigned int flags)
 {
-	s64 free_clusters, dirty_clusters, rsv, resv_clusters;
+	s64 free_clusters, dirty_clusters, rsv, resv_clusters, sec_rsv;
 	struct percpu_counter *fcc = &sbi->s_freeclusters_counter;
 	struct percpu_counter *dcc = &sbi->s_dirtyclusters_counter;
 
@@ -555,10 +565,12 @@ static int ext4_has_free_clusters(struct
 	 * r_blocks_count should always be multiple of the cluster ratio so
 	 * we are safe to do a plane bit shift only.
 	 */
-	rsv = (ext4_r_blocks_count(sbi->s_es) >> sbi->s_cluster_bits) +
+	rsv = (atomic64_read(&sbi->s_r_blocks_count) >> sbi->s_cluster_bits) +
 	      resv_clusters;
+	sec_rsv = (ext4_sec_r_blocks_count(sbi->s_es) >> sbi->s_cluster_bits) +
+		rsv;
 
-	if (free_clusters - (nclusters + rsv + dirty_clusters) <
+	if (free_clusters - (nclusters + sec_rsv + dirty_clusters) <
 					EXT4_FREECLUSTERS_WATERMARK) {
 		free_clusters  = percpu_counter_sum_positive(fcc);
 		dirty_clusters = percpu_counter_sum_positive(dcc);
@@ -566,9 +578,14 @@ static int ext4_has_free_clusters(struct
 	/* Check whether we have space after accounting for current
 	 * dirty clusters & root reserved clusters.
 	 */
-	if (free_clusters >= (rsv + nclusters + dirty_clusters))
+	if (free_clusters >= (sec_rsv + nclusters + dirty_clusters))
 		return 1;
 
+	if (flags & EXT4_MB_USE_EXTRA_ROOT_BLOCKS) {
+		if (free_clusters >= (rsv + nclusters + dirty_clusters))
+			return 1;
+	}
+
 	/* Hm, nope.  Are (enough) root reserved clusters available? */
 	if (uid_eq(sbi->s_resuid, current_fsuid()) ||
 	    (!gid_eq(sbi->s_resgid, GLOBAL_ROOT_GID) && in_group_p(sbi->s_resgid)) ||
