--- original/fs/ecryptfs/super.c	2020-05-07 08:06:20.043205277 +0200
+++ changed/fs/ecryptfs/super.c	2019-06-03 13:39:53.000000000 +0200
@@ -34,6 +34,10 @@
 #include <linux/magic.h>
 #include "ecryptfs_kernel.h"
 
+#ifdef CONFIG_SDP
+#include "ecryptfs_dek.h"
+#endif
+
 struct kmem_cache *ecryptfs_inode_info_cache;
 
 /**
@@ -60,6 +64,10 @@ static struct inode *ecryptfs_alloc_inod
 	mutex_init(&inode_info->lower_file_mutex);
 	atomic_set(&inode_info->lower_file_count, 0);
 	inode_info->lower_file = NULL;
+#ifdef CONFIG_SDP
+	// get userid from super block
+	inode_info->crypt_stat.engine_id = -1;
+#endif
 	inode = &inode_info->vfs_inode;
 out:
 	return inode;
@@ -154,6 +162,8 @@ static int ecryptfs_show_options(struct
 	struct super_block *sb = root->d_sb;
 	struct ecryptfs_mount_crypt_stat *mount_crypt_stat =
 		&ecryptfs_superblock_to_private(sb)->mount_crypt_stat;
+	struct ecryptfs_propagate_stat *propagate_stat =
+		&ecryptfs_superblock_to_private(sb)->propagate_stat;
 	struct ecryptfs_global_auth_tok *walker;
 	unsigned char final[2*ECRYPTFS_MAX_CIPHER_NAME_SIZE+1];
 
@@ -169,7 +179,23 @@ static int ecryptfs_show_options(struct
 			seq_printf(m, ",ecryptfs_sig=%s", walker->sig);
 	}
 	mutex_unlock(&mount_crypt_stat->global_auth_tok_list_mutex);
+#ifdef CONFIG_SDP
+	seq_printf(m, ",userid=%d", mount_crypt_stat->userid);
 
+	if (mount_crypt_stat->flags & ECRYPTFS_MOUNT_SDP_ENABLED){
+		seq_printf(m, ",sdp_enabled");
+	}
+
+	if (mount_crypt_stat->partition_id >= 0){
+	    seq_printf(m, ",partition_id=%d", mount_crypt_stat->partition_id);
+	}
+#endif
+
+#ifdef CONFIG_DLP
+	if (mount_crypt_stat->flags & ECRYPTFS_MOUNT_DLP_ENABLED){
+		seq_printf(m, ",dlp_enabled");
+	}
+#endif
 	seq_printf(m, ",ecryptfs_cipher=%s",
 			ecryptfs_get_full_cipher(
 				mount_crypt_stat->global_default_cipher_name,
@@ -179,6 +205,14 @@ static int ecryptfs_show_options(struct
 	if (mount_crypt_stat->global_default_cipher_key_size)
 		seq_printf(m, ",ecryptfs_key_bytes=%zd",
 			   mount_crypt_stat->global_default_cipher_key_size);
+#ifdef CONFIG_WTL_ENCRYPTION_FILTER
+	if (mount_crypt_stat->flags & ECRYPTFS_ENABLE_FILTERING)
+		seq_printf(m, ",ecryptfs_enable_filtering");
+#endif
+#ifdef CONFIG_CRYPTO_FIPS
+	if (mount_crypt_stat->flags & ECRYPTFS_ENABLE_CC)
+		seq_printf(m, ",ecryptfs_enable_cc");
+#endif
 	if (mount_crypt_stat->flags & ECRYPTFS_PLAINTEXT_PASSTHROUGH_ENABLED)
 		seq_printf(m, ",ecryptfs_passthrough");
 	if (mount_crypt_stat->flags & ECRYPTFS_XATTR_METADATA_ENABLED)
@@ -190,14 +224,92 @@ static int ecryptfs_show_options(struct
 	if (mount_crypt_stat->flags & ECRYPTFS_GLOBAL_MOUNT_AUTH_TOK_ONLY)
 		seq_printf(m, ",ecryptfs_mount_auth_tok_only");
 
+	seq_printf(m, ",base=%s", propagate_stat->base_path);
+	if (propagate_stat->propagate_type == TYPE_E_DEFAULT)
+		seq_printf(m, ",type=default");
+	else if (propagate_stat->propagate_type == TYPE_E_READ)
+		seq_printf(m, ",type=read");
+	else if (propagate_stat->propagate_type == TYPE_E_WRITE)
+		seq_printf(m, ",type=write");
+	seq_printf(m, ",label=%s", propagate_stat->label);
+
 	return 0;
 }
 
+static long ecryptfs_propagate_lookup(struct super_block *sb, char *pathname){
+	int ret = 0;
+	char *propagate_path;
+	struct ecryptfs_sb_info *sbi;
+	struct ecryptfs_propagate_stat *stat;
+	struct path sibling_path;
+	const struct cred *saved_cred = NULL;
+
+	sbi = ecryptfs_superblock_to_private(sb);
+	stat = &sbi->propagate_stat;
+	ECRYPTFS_OVERRIDE_ROOT_CRED(saved_cred);
+	propagate_path = kmalloc(PATH_MAX, GFP_KERNEL);
+	if (!propagate_path) {
+		ECRYPTFS_REVERT_CRED(saved_cred);
+		return -ENOMEM;
+	}
+	if (stat->propagate_type != TYPE_E_NONE && stat->propagate_type != TYPE_E_DEFAULT) {
+		snprintf(propagate_path, PATH_MAX, "%s/%s/%s/%s",
+				stat->base_path, "default", stat->label, pathname);
+		ret = (long)kern_path(propagate_path, LOOKUP_FOLLOW, &sibling_path);
+		if (!ret) {
+			path_put(&sibling_path);
+		}
+	}
+
+	if (stat->propagate_type != TYPE_E_NONE && stat->propagate_type != TYPE_E_READ) {
+		snprintf(propagate_path, PATH_MAX, "%s/%s/%s/%s",
+				stat->base_path, "read", stat->label, pathname);
+		ret = (long)kern_path(propagate_path, LOOKUP_FOLLOW, &sibling_path);
+		if (!ret) {
+			path_put(&sibling_path);
+		}
+	}
+
+	if (stat->propagate_type != TYPE_E_NONE && stat->propagate_type != TYPE_E_WRITE) {
+		snprintf(propagate_path, PATH_MAX, "%s/%s/%s/%s",
+				stat->base_path, "write", stat->label, pathname);
+		ret = (long)kern_path(propagate_path, LOOKUP_FOLLOW, &sibling_path);
+		if (!ret) {
+			path_put(&sibling_path);
+		}
+	}
+
+	if (stat->propagate_type != TYPE_E_NONE) {
+		snprintf(propagate_path, PATH_MAX, "/storage/%s/%s",
+				stat->label, pathname);
+		ret = (long)kern_path(propagate_path, LOOKUP_FOLLOW, &sibling_path);
+		if (!ret) {
+			path_put(&sibling_path);
+		}
+	}
+	ECRYPTFS_REVERT_CRED(saved_cred);
+	kfree(propagate_path);
+	return ret;
+}
+
 const struct super_operations ecryptfs_sops = {
 	.alloc_inode = ecryptfs_alloc_inode,
 	.destroy_inode = ecryptfs_destroy_inode,
 	.statfs = ecryptfs_statfs,
 	.remount_fs = NULL,
 	.evict_inode = ecryptfs_evict_inode,
-	.show_options = ecryptfs_show_options
+	.show_options = ecryptfs_show_options,
+	.drop_inode = generic_delete_inode
+
+};
+
+const struct super_operations ecryptfs_multimount_sops = {
+	.alloc_inode = ecryptfs_alloc_inode,
+	.destroy_inode = ecryptfs_destroy_inode,
+	.statfs = ecryptfs_statfs,
+	.remount_fs = NULL,
+	.evict_inode = ecryptfs_evict_inode,
+	.show_options = ecryptfs_show_options,
+	.drop_inode = generic_delete_inode,
+	.unlink_callback = ecryptfs_propagate_lookup
 };
