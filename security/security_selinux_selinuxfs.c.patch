--- original/security/selinux/selinuxfs.c	2020-05-07 08:06:23.827168095 +0200
+++ changed/security/selinux/selinuxfs.c	2019-06-03 13:39:54.000000000 +0200
@@ -41,6 +41,10 @@
 #include "objsec.h"
 #include "conditional.h"
 
+#if defined(CONFIG_TZ_ICCC)
+#include <linux/security/iccc_interface.h>
+#endif
+
 /* Policy capability filenames */
 static char *policycap_names[] = {
 	"network_peer_controls",
@@ -169,6 +173,23 @@ static ssize_t sel_write_enforce(struct
 	if (sscanf(page, "%d", &new_value) != 1)
 		goto out;
 
+// [ SEC_SELINUX_PORTING_COMMON
+#ifdef CONFIG_ALWAYS_ENFORCE
+	// If build is user build and enforce option is set, selinux is always enforcing
+	new_value = 1;
+	length = task_has_security(current, SECURITY__SETENFORCE);
+	audit_log(current->audit_context, GFP_KERNEL, AUDIT_MAC_STATUS,
+                        "config_always_enforce - true; enforcing=%d old_enforcing=%d auid=%u ses=%u",
+                        new_value, selinux_enforcing,
+                        from_kuid(&init_user_ns, audit_get_loginuid(current)),
+                        audit_get_sessionid(current));
+#if !defined(CONFIG_RKP_KDP)
+	selinux_enforcing = new_value;
+#endif
+	avc_ss_reset(0);
+	selnl_notify_setenforce(new_value);
+	selinux_status_update_setenforce(new_value);
+#else
 	if (new_value != selinux_enforcing) {
 		length = task_has_security(current, SECURITY__SETENFORCE);
 		if (length)
@@ -184,7 +205,17 @@ static ssize_t sel_write_enforce(struct
 		selnl_notify_setenforce(selinux_enforcing);
 		selinux_status_update_setenforce(selinux_enforcing);
 	}
+#endif
+// ] SEC_SELINUX_PORTING_COMMON
 	length = count;
+	
+#if defined(CONFIG_TZ_ICCC)
+	if (selinux_enabled && selinux_enforcing)
+		Iccc_SaveData_Kernel(SELINUX_STATUS, 0x0);
+	else
+		Iccc_SaveData_Kernel(SELINUX_STATUS, 0x1);
+#endif
+
 out:
 	free_page((unsigned long) page);
 	return length;
@@ -1904,7 +1935,11 @@ static struct kobject *selinuxfs_kobj;
 static int __init init_sel_fs(void)
 {
 	int err;
-
+// [ SEC_SELINUX_PORTING_COMMON
+#ifdef CONFIG_ALWAYS_ENFORCE
+	selinux_enabled = 1;
+#endif
+// ] SEC_SELINUX_PORTING_COMMON
 	if (!selinux_enabled)
 		return 0;
 
