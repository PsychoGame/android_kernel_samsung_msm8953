--- original/arch/arm64/mm/init.c	2020-05-07 08:31:20.420835513 +0200
+++ changed/arch/arm64/mm/init.c	2019-06-03 13:39:48.000000000 +0200
@@ -159,16 +159,25 @@ void __init arm64_memblock_init(void)
 {
 	phys_addr_t dma_phys_limit = 0;
 
+	set_memsize_kernel_type(MEMSIZE_KERNEL_STOP);
 	memblock_enforce_memory_limit(memory_limit);
 
 	/*
 	 * Register the kernel text, kernel data, initrd, and initial
 	 * pagetables with memblock.
 	 */
+	set_memsize_kernel_type(MEMSIZE_KERNEL_KERNEL);
 	memblock_reserve(__pa(_text), _end - _text);
+	set_memsize_kernel_type(MEMSIZE_KERNEL_STOP);
+	record_memsize_reserved("initmem", __pa(__init_begin),
+				__init_end - __init_begin, false, false);
 #ifdef CONFIG_BLK_DEV_INITRD
-	if (initrd_start)
+	if (initrd_start) {
 		memblock_reserve(__virt_to_phys(initrd_start), initrd_end - initrd_start);
+		record_memsize_reserved("initrd", __virt_to_phys(initrd_start),
+					initrd_end - initrd_start, false,
+					false);
+	}
 #endif
 
 	early_init_fdt_scan_reserved_mem();
@@ -179,6 +188,7 @@ void __init arm64_memblock_init(void)
 
 	high_memory = __va(memblock_end_of_DRAM() - 1) + 1;
 	dma_contiguous_reserve(dma_phys_limit);
+	set_memsize_kernel_type(MEMSIZE_KERNEL_OTHERS);
 
 	memblock_allow_resize();
 	memblock_dump_all();
@@ -188,6 +198,7 @@ void __init bootmem_init(void)
 {
 	unsigned long min, max;
 
+	set_memsize_kernel_type(MEMSIZE_KERNEL_PAGING);
 	min = PFN_UP(memblock_start_of_DRAM());
 	max = PFN_DOWN(memblock_end_of_DRAM());
 
@@ -203,6 +214,7 @@ void __init bootmem_init(void)
 	zone_sizes_init(min, max);
 
 	max_pfn = max_low_pfn = max;
+	set_memsize_kernel_type(MEMSIZE_KERNEL_OTHERS);
 }
 
 #ifndef CONFIG_SPARSEMEM_VMEMMAP
